#!/usr/bin/env yabasic

#get libraries
import clasquinatorlib
import linuxmisclib

#global variables
intro$ = "/tmp/yabcheatsheet_intro.txt"
newfile$=""

#clear out old files in case of improper shutdown
system("rm -f /tmp/yabcheatsheet*")

#fill screen with welcome message
restore introtxt
MkFile(intro$)
FillScreen(intro$)
decision$ = MainMenu$()


#########################################
##########Main loop######################
#########################################
while(true)
	switch decision$
		case "q"
			TheBitterEnd():break
		case "b"
			ShortMenu$():break
		case "l"
			LongMenu$():break
		default
			choice$ = inkey$
	end switch
	decision$ = MainMenu$()
wend
#########################################
#########################################


sub MainMenu$()
	local choice$
	choice$ = MenuDlg$("Cheatsheet", "Quit#Brief descriptions#Long descriptions",0)
	return choice$
end sub

sub ShortMenu$()
	local choice$
	choice$ = SubMenuDlg$("Brief descriptions","Back#Clasquin#Dialog#Kdialog#Linux#Whiptail#Zenity","Quit#Brief descriptions#Long descriptions")
		switch choice$
		case "c"
			restore clasquinatortxt
			read newfile$
			MkFile(newfile$)
			TextFileDlg2(newfile$, "Clasquinator", "OK"):break
		case "d"
			restore dialogtxt
			read newfile$
			MkFile(newfile$)
			TextFileDlg2(newfile$, "Dialog", "OK"):break
		case "k"
			restore kdialogtxt
			read newfile$
			MkFile(newfile$)
			TextFileDlg2(newfile$, "Kdialog", "OK"):break
		case "l"
			restore linuxmisctxt
			read newfile$
			MkFile(newfile$)
			TextFileDlg2(newfile$, "Linux Miscellaneous", "OK"):break
		case "w"
			restore whiptailtxt
			read newfile$
			MkFile(newfile$)
			TextFileDlg2(newfile$, "Whiptail", "OK"):break
		case "z"
			restore zenitytxt
			read newfile$
			MkFile(newfile$)
			TextFileDlg2(newfile$, "Zenity", "OK"):break
		case "b"
		default
			break
	end switch
end sub

sub LongMenu$()
	local choice$, mdlesswarning$
	if TestForUtility("mdless") then
		choice$ = SubMenuDlg$("Longer descriptions","Back#Clasquin#Dialog#Kdialog#Linux#Whiptail#Yabasic#Zenity","Quit#Brief descriptions#Long descriptions")
		switch choice$
		//if you're on a fast system you won't even notice the waitdialogs
			case "c"
				WaitDlg2(1, "Please wait, creating MD file.")
				restore clasquinatormd
				read newfile$
				MkFile(newfile$)
				WaitDlg(0)
				OpenInMdless$(newfile$)
				FillScreen(intro$): break
			case "d"
				WaitDlg2(1, "Please wait, creating MD file.")
				restore dialogmd
				read newfile$
				MkFile(newfile$)
				WaitDlg(0)
				OpenInMdless$(newfile$)
				FillScreen(intro$): break
			case "k"
				WaitDlg2(1, "Please wait, creating MD file.")
				restore kdialogmd
				read newfile$
				MkFile(newfile$)
				WaitDlg(0)
				OpenInMdless$(newfile$)
				FillScreen(intro$): break
			case "l"
				WaitDlg2(1, "Please wait, creating MD file.")
				restore linuxmiscmd
				read newfile$
				MkFile(newfile$)
				WaitDlg(0)
				OpenInMdless$(newfile$)
				FillScreen(intro$): break
			case "w"
				WaitDlg2(1, "Please wait, creating MD file.")
				restore whiptailmd
				read newfile$
				MkFile(newfile$)
				WaitDlg(0)
				OpenInMdless$(newfile$)
				FillScreen(intro$): break
			case "y"
				system("man yabasic")
				FillScreen(intro$)
				break
			case "z"
				WaitDlg2(1, "Please wait, creating MD file.")
				restore zenitymd
				read newfile$
				MkFile(newfile$)
				WaitDlg(0)
				OpenInMdless$(newfile$)
				FillScreen(intro$): break
			case "b"
			default
		end switch$
	else
		mdlesswarning$="Warning: the mdless utility was not found. To get more more options on the next screen, please install mdless from https://brettterpstra.com/projects/mdless/"
		StringDisplayDlg2(mdlesswarning$, "A required utility is missing", "OK")
		choice$ = SubMenuDlg$("Longer descriptions","Back#Yabasic","Quit#Brief descriptions#Long descriptions")
		switch choice$
			case "y"
				system("man yabasic")
				FillScreen(intro$)
				break
			case "b"
			default
		end switch$
	
	endif
end sub

sub MkFile(filename$)
	if FileExists(filename$) return
	local handle, thestring$
	handle = open(filename$, "w")
	repeat
		read thestring$
		if thestring$ <> "**********************" print #handle thestring$
	until(thestring$ = "**********************")
	close handle
end sub

sub FillScreen(intro$)
	//Now with word wrap!
	//OK I cheated a bit. The file created uses # to denote a newline and ~
	//to mark the end of a line. But hey, this is not a general-purpose
	//routine, so I can get away with this.
	local handle, thestring$, width, line$
	clear screen
	width=peek("screenwidth")
	handle = open(intro$, "r")
	while(not (EOF(handle)))
		input #handle thestring$
		if instr(thestring$, "#") then 
			print 
			line$=""
		elseif instr(thestring$, "~") 
			if len(line$ + thestring$) < width -1 then
				line$ = line$ + left$(thestring$, len(thestring$)-1)
				print line$
				line$ = ""
			else
				print line$
				print left$(thestring$, len(thestring$)-1)
				line$=""
			endif
		elseif len(line$ + thestring$) > (width -2)
			print line$
			line$ = thestring$ + " "
		else
			line$ = line$ + thestring$ + " "
		endif
	wend
	close handle
end sub

sub TheBitterEnd()
	system("rm -f /tmp/yabcheatsheet*")
	clear screen
	exit
end sub

label introtxt
data "#"
data "Extension libraries for yabasic.~"
data "================================~"
data "#"
data "A series of libraries for yabasic , the BASIC dialect by Marc Ihm, that give access to a number of common utilities on Linux, intended to provide standard dialogs.~"
data "#"
data "This allows you to use yabasic as the backend for \"wizard\"-style applications.~"
data "#"
data "This software is still very much in the alpha stage. The routines work, but need a lot of optimization and error-trapping.~"
data "#"
data "The libraries should exist either in the same folder as your program (symlinks work!) or in the standard yabasic library location on your system.~"
data "#"
data "Developed on elementary OS 0.4 \"Loki\" and Debian Buster, but it should work on any *NIX system that will run yabasic and has one or more of the required utilities.~"
data "#"
data "**********************"

label clasquinatortxt
data "/tmp/yabcheatsheetclasquinatortxt"
data "Clasquinator"
data "============"
data " "
data "This library allows yabasic to display a variety of dialogs in text mode without making use of external commands."
data " "
data "All"
data " "
data "ChangeColour(menu$, title$, trigger$)"
data "ClearDlg(...)"
data "EncloseText$(the string$)"
data "getcmd$()"
data "GetDirDlg$(title$, text$, start$), GetDirDlg2$(...), GetDirDlg3$(...), GetDirDlg4$(...)"
data "GetFileDlg$(title$, text$, start$), GetFileDlg2$(...),GetFileDlg3$(...), GetFileDlg4$(...)"
data "InputDlg$(text$, title$, ok$, cancel$), InputDlg2$(...), InputDlg3$(...), InputDlg4$(...)"
data "MakeDirDlg$(title$, text$, start$), MakeDirDlg2$, MakeDirDlg3$, MakeDirDlg4$"
data "MakeFileDlg$, MakeFileDlg2$(...), MakeFileDlg3$(...), MakeFileDlg4$(...)"
data "MenuDlg(title$(title$, menustring$, level, mainmenustring$), MenuDlg2(...), MenuDlg3(...), MenuDlg4(...)"
data "MessageDlg(text$, ok$), MessageDlg2(...), MessageDlg3(...), MessageDlg4(...)"
data "PasswordDlg$(text$, title$, ok$, cancel$), PasswordDlg2$(...), PasswordDlg3$(...), PasswordDlg4$(...)"
data "RadioDlg(title$, menustring$, level, mainmenustring$), RadioDlg2(...), RadioDlg3(...), RadioDlg4(...)"
data "StringDisplayDlg(string$, title$, exit$), StringDisplayDlg2(...), StringDisplayDlg3(...), StringDisplayDlg4(...)"
data "SubMenuDlg(title$, menustring$, mainmenustring$), SubMenuDlg2(...), SubMenuDlg3(...), SubMenuDlg4(...)"
data "TestForDialogUtility$()"
data "TextFileDlg(filename$, title$, exit$), TextFileDlg2(...), TextFileDlg3(...), TextFileDlg4(...)"
data "WaitDlg(onoff, text$), WaitDlg2(...), WaitDlg3(...), WaitDlg4(...)"
data "YesNoDlg(text$,yes$, no$), YesNoDlg2(...), YesNoDlg3(...), YesNoDlg4(...)"
data "**********************"

label clasquinatormd
data "/tmp/yabcheatsheetclasquinatormd"
data "# clasquinatorlib.yab"
data ""
data "A yabasic library (c) Michel Clasquin-Johnson 2018."
data "Licensed accordingto the MIT license"
data ""
data "This library allows *yabasic* to display a variety of dialogs in text mode without making use of external commands."
data ""
data "*Some* routines will perhaps also be made available in graphics mode. Maybe, one day. I am a better text mode programmer, what can I say? "
data ""
data "The library is written as a textmode application and must be run in a terminal. It will not be useful in a headless script."
data ""
data "The entire set of libraries focuses on sane defaults and getting basic functionality into yabasic."
data ""
data "The images below are for illustration only. The exact appearance of the dialogs will depend on your system settings."
data ""
data "Developed, at various stages, on elementary OS 0.4 \"Loki\", Debian Buster and Lubuntu 18.04 (i.e. Linux), but it should work on any *NIX system that will run yabasic. Testing on Windows has been far more sketchy, since I don't have a windows box here, but I did what I could in my lunch break at work ;-)."
data ""
data "The library should exist either in the same folder as your program (symlinks work) or in the standard yabasic library location on your system."
data ""
data "To use the library, use the command "
data "```"
data "import clasquinatorlib"
data "```"
data "If you would rather cut and paste these subroutines into your own program rather than importing this rather large library, or create your own, smaller library with just the routines you need, be my guest (I *would* appreciate a note of acknowledgement in your code). But some subroutines require supporting routines that you will find at the end of this library. You will have to include those as well."
data ""
data "You should **not** use this library and one of the others in this set that provides dialogs concurrently, because they replicate subroutine names. Pick the right one for your program and stick with it!"
data ""
data "Unlike the other libraries, you cannot use *\\n* to break a line in your text variables. Keep that in mind if compatibility between the libraries is important."
data ""
data "By default, widgets are drawn in <span style=\"color:cyan; background-color:black\">cyan</span>, with button and menu triggers in <span style=\"color:red; background-color:black\">red</span> and the title in <span style=\"color:blue; background-color:black\">blue</span>. But you can override this by setting the GLOBAL variables *menu_colour$*, *title_colour$* and *trigger_colour$*. There is a routine ChangeColour() to make this easier."
data ""
data "The \"buttons\" are not mouse-aware."
data ""
data "The first letter of each button or menu item automatically becomes the trigger. Both lower and upper case variants will activate it. It is up to you to ensure that you do not use menu items that start with the same letter. "
data ""
data "*Hint*: You can always number them, e.g."
data "    menuitem1$ = \"1.File\""
data "This will make the menu react to the \"1\" key being pressed, rather than \"f\" or \"F\"."
data ""
data "If the text of a message (usually in the variable *text$*) is too long to fit in one line, it will be truncated. This may vary with the width of the user's terminal window, so be conservative!"
data ""
data "Excessive quote marks (required in other libraries and often supplied by EncloseText$() or \\\"\\\") will be removed by the library to maintain compatibility. "
data ""
data "Excessive spaces at the *front and back* of *text$* will be trimmed, but multiple spaces *within* *text$* will be maintained."
data ""
data "This library is currently still in the development stages and not really usable. But watch this space!"
data ""
data "## Variables"
data ""
data "This library requires a small number of *global* variables. You do not need to initialize them, but don't use the following variable names in your program unless you have a very good reason."
data ""
data "+ *menu_colour$*"
data "+ *title_colour$*"
data "+ *trigger_colour$*"
data "+ *screenheight*"
data "+ *screenwidth*"
data ""
data "## External utilities required"
data ""
data "I didn't quite manage to get away with writing this library without making *any* system calls. You will need the following commands to be installed on your system."
data ""
data "+ Linux"
data "    + ls"
data "    + grep"
data "    + pwd"
data "    + cut"
data "+ Windows"
data "    + echo"
data "    + cd"
data "    + dir"
data ""
data "If you don't have these, your system is broken and you really, really need to reinstall your operating system. So I'm not going to worry about it."
data ""
data "## Routines available:"
data ""
data "This library poaches as many ideas as possible from the other four dialog-providing libraries, but there is not 100% compatibility here, so we will not divide things into Common and Clasquinator-specific sections."
data ""
data "+ **All**"
data "    + *ChangeColour*(menu$, title$, trigger$)"
data "    + *ClearDlg*()"
data "    + *EncloseText$*(the string$)"
data "    + *getcmd$*()"
data "    + *GetDirDlg$*(), *GetDirDlg2$*(), *GetDirDlg3$*(), *GetDirDlg4$*()"
data "    + *GetFileDlg$*, *GetFileDlg2$*,*GetFileDlg3$*, *GetFileDlg4$*"
data "    + *InputDlg$*(), *InputDlg2$*(), *InputDlg3$*(), *InputDlg4$*()"
data "    + *MakeDirDlg$*, *MakeDirDlg2$*, *MakeDirDlg3$*, *MakeDirDlg4$*"
data "    + *MakeFileDlg$*, *MakeFileDlg2$*, *MakeFileDlg3$*, *MakeFileDlg4$*"
data "    + *MenuDlg*(), *MenuDlg2*(), *MenuDlg3*(), *MenuDlg4*()"
data "    + *MessageDlg*(), *MessageDlg2*(), *MessageDlg3*(), *MessageDlg4*()"
data "    + *PasswordDlg$*(), *PasswordDlg2$*(), *PasswordDlg3$*(), *PasswordDlg4$*()"
data "    + *RadioDlg*(), *RadioDlg2*(), *RadioDlg3*(), *RadioDlg4*()"
data "    + *StringDisplayDlg*(), *StringDisplayDlg2*(), *StringDisplayDlg3*(), *StringDisplayDlg4*()"
data "    + *SubMenuDlg*(), *SubMenuDlg2*(), *SubMenuDlg3*(), *SubMenuDlg4*()"
data "    + *TestForDialogUtility$*()"
data "    + *TextFileDlg*(), *TextFileDlg2*(), *TextFileDlg3*(), *TextFileDlg4*()"
data "    + *WaitDlg*(), *WaitDlg2*(), *WaitDlg3*(), *WaitDlg4*()"
data "    + *YesNoDlg*(), *YesNoDlg2*(), *YesNoDlg3*(), *YesNoDlg4*()"
data ""
data "+ **ChangeColour**(menu$, title$, trigger$)"
data "    + Change the three colours used in this library."
data "    + The value *menu$* is used to draw most elements."
data "    + The value *title$* is used to print the title of those widgets that have them (but only in the default command set, in the others like *blablaDlg2()*, *blablaDlg3()* and so on it is calculated to either black or white for legibility). "
data "    + The value *trigger$* is the highlighted letter on buttons and menu items."
data "    + The colours available are the normal ones yabasic can handle, namely \"black\", \"white\", \"red\", \"blue\", \"green\", \"yellow\", \"cyan\" and \"magenta\" (which can be abbreviated as \"bla\", \"whi\", \"red\", \"blu\", \"gre\", \"yel\", \"cya\" and \"mag\" respectively)."
data "    + The library does not check if the two colours are identical, or if they complement each other visually. If you want to make your menus unreadable, more power to you! "
data "    +The background colour of widgets is always black (well, actually, it is whatever your terminal's default background colour is), but your program's colours will be restored to whatever they were when a widget closes."
data "    + To return to the default set, use the command"
data "*ChangeColourToDefault*()."
data ""
data "+ **ClearDlg**()"
data "    + On *dialog* and *whiptail*, this clears the dialog from your terminal. Same as the yabasic command CLEAR SCREEN, but may work better if you are expecting to issue another Linux command immediately."
data "    + On *zenity*, *clasquinator* and *kdialog*, dummy routines are provided for compatibility so that you do not need to rewrite your code."
data ""
data "+ **EncloseText$**(thestring$)"
data "    + A simplified version of the *EncloseString$*() routine that can be found in the *linuxmisclib* library"
data "    + Encloses a string in double quotes, if it isn't already."
data "    + Therefore *a$ = EncloseText$(\"This is text\")* gives the same result as *a$ = \"\\\"This is text\\\"\"*"
data "    + Mostly for use with filenames that may include spaces."
data ""
data "+ **getcmd$**()"
data "    + Returns the command set available."
data "    + This is really just for me, to stop me from getting confused while I am editing four libraries simultaneously. "
data "    + However, you could use it to test which utility (or library, in the case of clasquinator) is currently in use and if it is safe to use routines not in the common list."
data "    + e.g, *if getcmd$() = \"clasquinator\" SubmenuDlg(options ....)*"
data "    + or  *if getcmd$() = \"zenity\" ZNotifyDlg(\"this is a notification\")*"
data ""
data "+ **GetDirDlg$**(title$, text$, start$)"
data "    + Select a directory to open."
data "    + Displays the available directories but requires user to type it in."
data "    + The value *title$* is the title on top of the widget"
data "    + The value *start$* is the initial directory to start from. If blank or not supplied,this defaults to the current directory."
data "    + Data entry is CASE-SENSITIVE, but you do not need to type the quote marks supplied for filenames with spaces."
data "    + Result is returned as a string value with quote marks and extra (leading or trailing) spaces stripped off."
data "    + An empty string is returned, if there are no existing directories."
data "    + ONLY available in *clasquinator*, but there are equivalents in *zenity* and *kdialog*."
data "    + Now works in windows, but there are display bugs to work out."
data "    + *Example*:"
data ""
data "```"
data "a$ = GetDirDlg$(\"Pick a folder\", \"Which directory would you like to see?\",\"~\")"
data "```"
data ""
data "+ **GetDirDlg2$**(title$, text$, start$)"
data "    + Select a directory to open."
data "    + Same as GetDirDlg$() but looks different."
data "    + *Example*:"
data ""
data "```"
data "a$ = GetDirDlg2$(\"Pick a folder\", \"Which directory would you like to see?\",\"~\")"
data "```"
data ""
data "+ **GetDirDlg3$**(title$, text$, start$)"
data "    + Select a directory to open."
data "    + Same as GetDirDlg$() but looks different."
data "    + *Example*:"
data ""
data "```"
data "a$ = GetDirDlg3$(\"Pick a folder\", \"Which directory would you like to see?\",\"~\")"
data "```"
data ""
data "+ **GetDirDlg4$**(title$, text$, start$)"
data "    + Select a directory to open."
data "    + Same as GetDirDlg$() but looks different."
data "    + *Example*:"
data ""
data "```"
data "a$ = GetDirDlg4$(\"Pick a folder\", \"Which directory would you like to see?\",\"~\")"
data "```"
data ""
data "+ **GetFileDlg$**(title$, text$, start$)"
data "+ **GetFileDlg2$**(title$, text$, start$)"
data "+ **GetFileDlg3$**(title$, text$, start$)"
data "+ **GetFileDlg4$**(title$, text$, start$)"
data "    + Select a file to open."
data "    + Displays the available files but requires user to type it in."
data "    + The value *title$* is the title on top of the widget"
data "    + The value *start$* is the initial directory to start from. If blank or not supplied,this defaults to the current directory."
data "    + Data entry is CASE-SENSITIVE, but you do not need to type the quote marks supplied for filenames with spaces."
data "    + Result is returned as a string value with quote marks and extra (leading or trailing) spaces stripped off."
data "    + An empty string is returned. if there are no existing files. "
data "    + ONLY available in *clasquinator*, but there are equivalents in *zenity* and *kdialog*."
data ""
data "+ **InputDlg$**(text$, title$, ok$, cancel$)"
data "+ **InputDlg2$**(text$, title$, ok$, cancel$)"
data "+ **InputDlg3$**(text$, title$, ok$, cancel$)"
data "+ **InputDlg4$**(text$, title$, ok$, cancel$)"
data "    + Presents a one-line dialog into which the user can type a string answer."
data "    + The value *title$* is the title on top of the widget."
data "    + The values *ok$* and *cancel$* are not used in clasquinator and may be omitted. They are kept in the code for compatibility reasons."
data "    + ENTER accepts the input, which can also be an empty string."
data "    + The empty string counts as the equivalent of a cancel button."
data "    + The result is returned as a string value."
data "    + *Examples:*"
data ""
data "```"
data "a$ = InputDlg$(\"What is your name?\", \"Who are you?\")"
data "```"
data ""
data "```"
data "a$ = InputDlg2$(\"What is your name?\", \"Who are you?\")"
data "```"
data ""
data "+ **MakeDirDlg$**(title$, text$, start$)"
data "+ **MakeDirDlg2$**(title$, text$, start$)"
data "+ **MakeDirDlg3$**(title$, text$, start$)"
data "+ **MakeDirDlg4$**(title$, text$, start$)"
data "    + Create a directory."
data "    + Same as *GetDirDlg$()* but allows user to type a new filename so that it can be created."
data "    + Will not allow duplicate filenames to be selected."
data "    + see *GetDirDlg$()* for examples."
data ""
data "+ **MakeFileDlg$**(title$, text$, start$)"
data "+ **MakeFileDlg2$**(title$, text$, start$)"
data "+ **MakeFileDlg3$**(title$, text$, start$)"
data "+ **MakeFileDlg4$**(title$, text$, start$)"
data "    + Create a file."
data "    + Same as *GetFileDlg$()* but allows user to type a new filename so that it can be created."
data "    + Will not allow duplicate filenames to be selected."
data "    + see *GetDirDlg$()* for examples."
data ""
data "+ **MenuDlg$**(title$, menustring$, level, mainmenustring$)"
data "+ **MenuDlg2$**(title$, menustring$, level, mainmenustring$)"
data "+ **MenuDlg3$**(title$, menustring$, level, mainmenustring$)"
data "+ **MenuDlg4$**(title$, menustring$, level, mainmenustring$)"
data "    + Create a one-line menu of options for the user to choose from."
data "    + The value *title$* is the title on top of the widget."
data "    + The value *menustring$* is the list of menu options as a single string, separated by hash signs (#). Spaces are allowed."
data "    + The value *level* can be either 0 for a primary menu or 1 for a submenu."
data "    + If *level* = 1 *mainmenustring$* must also be supplied, otherwise it is not required. This is the *menustring$* of the originating menu."
data "    + The first letter of menu item automatically becomes the trigger. Both lower and upper case variants will activate it. It is up to you to ensure that you do not use menu items that start with the same letter."
data "    + Menus will only be displayed to the width of the terminal, so keep them short!"
data "    + Results are returned as a string variable, which will be the trigger in *lowercase*."
data "    + Submenus can also be created with the *SubMenuDlg$(title$, menustring$)* routine, which is an alias to this one and does not require the *level* parameter.Therefore the following two commands are completely equivalent:"
data "```"
data "MenuDlg$(\"File menu\",\"Open#Close#Exit\",1, \"File#Edit#Help\")"
data "SubMenuDlg$(\"File menu\",\"Open#Close#Exit\",\"File#Edit#Help\") "
data "```"
data "*Examples:*"
data ""
data "```"
data "a$ = MenuDlg$(\"Main Menu\", \"File#Edit#Help\", 0)"
data "```"
data ""
data "```"
data "a$ = MenuDlg$(\"Help Menu\", \"Help#About\", 1, \"File#Edit#Help\")"
data "```"
data ""
data "As you would expect by now there are commands called *MenuDlg2$()* and *SubMenuDlg2$()* and so on to change the appearance of the menus."
data ""
data "```"
data "a$ = SubMenuDlg2$(\"Help Menu\", \"Help#About\", \"File#Edit#Help\")"
data "```"
data ""
data "+ **MessageDlg**(text$, ok$)"
data "+ **MessageDlg2**(text$, ok$)"
data "+ **MessageDlg3**(text$, ok$)"
data "+ **MessageDlg4**(text$, ok$)"
data "    + Display a simple message with an OK button."
data "    + The value *ok$* is the text of the accept button, normally OK."
data "    + You only have one line to play with, so keep those messages short!"
data "    + Returns nothing, therefore does not actually trap the keypress. But the trigger is highlighted to ensure uniformity among the library's widgets"
data "    + *Examples:*"
data ""
data "```"
data "MessageDlg(\"This is a simple message dialog. Close it with ENTER or O.\",\"OK\")"
data "```"
data ""
data "```"
data "MessageDlg2(\"This is a simple message dialog. Close it with ENTER or O.\",\"OK\")"
data "```"
data ""
data "+ **PasswordDlg$**(text$, title$, ok$, cancel$)"
data "+ **PasswordDlg2$**(text$, title$, ok$, cancel$)"
data "+ **PasswordDlg3$**(text$, title$, ok$, cancel$)"
data "+ **PasswordDlg4$**(text$, title$, ok$, cancel$)"
data "    + Supplied for compatibility purposes, but here it is just an alias for *InputDlg$*() - inputs are not obfuscated with asterisks."
data ""
data "+ **RadioDlg$**(title$, menustring$, level, mainmenustring$)"
data "+ **RadioDlg2$**(title$, menustring$, level, mainmenustring$)"
data "+ **RadioDlg3$**(title$, menustring$, level, mainmenustring$)"
data "+ **RadioDlg4$**(title$, menustring$, level, mainmenustring$)"
data "    * In *clasquinator*, this is an alias to *MenuDlg$()*, provided for compatibility."
data ""
data "+ **StringDisplayDlg**(string$, title$, exit$)"
data "+ **StringDisplayDlg2**(string$, title$, exit$)"
data "+ **StringDisplayDlg3**(string$, title$, exit$)"
data "+ **StringDisplayDlg4**(string$, title$, exit$)"
data "    + Displays a string in a box in the middle of the screen. "
data "    + This box will always be three lines from the top and bottom of the terminal and three columns from the left and right. Resing the terminal will count as a keypress in some operating system!"
data "    + *Any* key exits if the string has been completed,or shows the next screen if there is more."
data "    + The value *title$* is the title on top of the widget."
data "    + The value *exit$* is the title of the button, normally *OK*."
data "    + This button is a dummy, just for looks."
data "    + It works better if you keep your string reasonably short, since there is no escape button if you make the user page through 100 pages!"
data "    + To open up a new line, embed \" # \" (a hash mark surrounded by spaces) in your string. You can even open up multiple lines with \" # # \" and so on."
data "    + Returns nothing"
data "    + *Example:*"
data ""
data "```"
data "a$ = \"This is the string to display. Let's make it long so that wordwrap is enforced.\""
data "StringDisplayDlg(a$, \"String Display Test\", \"OK\")"
data "OR"
data "a$ = \"This is the string to display. Let's make it long so that wordwrap is enforced.\""
data "StringDisplayDlg2(a$, \"String Display Test\", \"OK\")"
data "```"
data ""
data "*(Composite of the commands StringDisplayDlg() and StringDisplayDlg2() pictured above)*"
data ""
data "+ **SubMenuDlg$**(title$, menustring$, mainmenustring$)"
data "+ **SubMenuDlg2$**(title$, menustring$, mainmenustring$)"
data "+ **SubMenuDlg4$**(title$, menustring$, mainmenustring$)"
data "+ **SubMenuDlg4$**(title$, menustring$, mainmenustring$)"
data "    + see *MenuDlg$()*."
data ""
data "+ **TestForDialogUtility$**\\(\\)"
data "    + Routine to test if the called utility actually exists on the system."
data "    + An empty string returned means it does, otherwise an error message is returned."
data "    + in *clasquinator*, this is a dummy routine provided for compatibility. It will always return an empty string."
data ""
data "+ **TextFileDlg**(filename$, title$, exit$)"
data "+ **TextFileDlg2**(filename$, title$, exit$)"
data "+ **TextFileDlg3**(filename$, title$, exit$)"
data "+ **TextFileDlg4**(filename$, title$, exit$)"
data "    + Displays a text file in a box in the middle of the screen."
data "    + In appearance this looks exactly like *StringDisplayDlg()* or *StringDisplayDlg2()* and so on, respectively."
data "    + This box will always be three lines from the top and bottom of the terminal and three columns from the left and right. Resing the terminal will count as a keypress in some operating system!"
data "    + *Any* key exits if the file has been completed,or shows the next screen if there is more."
data "    + The value *title$* is the title on top of the widget."
data "    + The value *exit$* is the title of the button, normally *OK*."
data "    + This button is a dummy, just for looks."
data "    + It works better if you keep your file reasonably short, since there is no escape button if you make the user page through 100 pages!"
data "    + This is meant for simple text files. Trying to feed it complex HTML or Markdown documents is not recommended."
data "    + It is actually better if your text file is not formatted with hard returns. Rather let this routine handle the word wrapping."
data "    + Returns nothing."
data "    + *Example:*"
data ""
data "```"
data "TextFileDlg2(\"./pg4.txt\", \"The Gettysburg Address\", \"OK\")"
data "```"
data ""
data "+ **WaitDlg**(onoff, text$)"
data "+ **WaitDlg2**(onoff, text$)"
data "+ **WaitDlg3**(onoff, text$)"
data "+ **WaitDlg4**(onoff, text$)"
data "    + Display a small box with a centred one-line \"Please wait\" message or anything else that requires no response."
data "    + Use this while you do something else that may take a while that does NOT involve printing to screen."
data "    + If you do print, it will be wiped out when you close the dialog."
data "    + Keep your message short! You only have thirty characters to play with."
data "    + To display the message, *onoff* should be 1 and *text$* must be supplied."
data "    + To remove the dialog and bring the original screen back up, just use *WaitDlg(0)*. This works even if you used *WaitDlg2()* to create the dialog."
data "    + Returns nothing."
data "    + *Example:*"
data ""
data "```"
data "WaitDlg2(1, \"Please wait\")"
data "wait 4 //this is where you would do other stuff"
data "WaitDlg(0)"
data "```"
data ""
data "+ **YesNoDlg**(text$,yes$, no$)"
data "+ **YesNoDlg2**(text$,yes$, no$)"
data "+ **YesNoDlg3**(text$,yes$, no$)"
data "+ **YesNoDlg4**(text$,yes$, no$)"
data "    + Displays a dialog with text (normally a question) and the options to reply yes or no."
data "    + The first letter of the *yes$* and *no$* variables will become the hotkeys for those buttons, so make sure they are different. Hotkeys are case-insensitive."
data "    + *no$* is actually a dummy here: pressing anything other than the hotkey for *yes$* will return a no."
data "    + Instead of \"Yes\" and \"No\", these labels could also ber something like \"Accept\" and \"Cancel\". This is why this library does not have a separate *AcceptCancelDlg* routine."
data "    + NOTE: pressing ENTER means NO. If this is not what you want, just swap the labels *yes$* and *no$* around, and *yes$* will become the dummy that is the default on every keypress except the hotkey for *no$*."
data "    + e.g. *YesNoDlg(text$, no$, yes$, altsymbol$)* - See the second example below."
data "	+ This will also reverse the way they are displayed. This routine only tests for the button on the left."
data "    + Returns 1 for yes and 0 for no."
data "    + *Examples:*"
data ""
data "```"
data "YesNoDlg(\"Can you see this? Press Y if you can.\", \"Yes!\", \"No\")"
data "```"
data ""
data "```"
data ""
data "YesNoDlg4(\"Erase all data from the hard drive?.\", \"No!\", \"Yes\")"
data "```"
data "**********************"

label dialogtxt
data "/tmp/yabcheatsheetdialogtxt"
data "Dialog"
data "======"
data " "
data "This library for yabasic allows the use of the Linux command dialog to display a variety of dialogs in text mode."
data ""
data "Common"
data " "
data "ClearDlg()"
data "EncloseText$(thestring$)"
data "getcmd$()"
data "InputDlg$(text$, title$, ok$, cancel$)"
data "MenuDlg(text$, title$, ok$, cancel$, menustring$)"
data "MessageDlg(text$, ok$)"
data "PasswordDlg$(text$, title$, ok$, cancel$)"
data "RadioDlg(text$, title$, ok$, cancel$, menustring$, selected$)"
data "TestForDialogUtility$()"
data "TextFileDlg(filename$, title$, exit$)"
data "YesNoDlg(text$,yes$, no$)"
data " "
data "Specific"
data " "
data "DCalendarDlg$(text$, ok$, cancel$)"
data "TransientInfoDlg(text$)"
data "**********************"

label dialogmd
data "/tmp/yabcheatsheetdialogmd"
data "# dialoglib.yab"
data ""
data "A yabasic library (c) Michel Clasquin-Johnson 2018."
data "Licensed accordingto the MIT license"
data ""
data "This library for *yabasic* allows the use of the Linux command *dialog* to display a variety of dialogs in text mode."
data ""
data "The library will test for the presence of the dialog command and will exit gracefully if it is not present. dialog is a textmode application and must be run in a terminal. It will not be useful in a headless script."
data ""
data "The entire set of libraries focuses on sane defaults and getting basic functionality into yabasic. There are a lot of options that will not be implemented!"
data ""
data "The images below are for illustration only. The exact appearance of the dialogs will depend on your system settings."
data ""
data "Developed on elementary OS 0.4 \"Loki\" and Debian Buster), but it should work on any system that will run both yabasic and the dialog command."
data ""
data "The library should exist either in the same folder as your program or in the standard yabasic library location on your system."
data ""
data "To use the library, use the command "
data ""
data "    import dialoglib"
data ""
data "If you would rather cut and paste these subroutines into your own program rather than importing this rather large library, or create your own, smaller library with just the routines you need, be my guest (I *would* appreciate a note of acknowledgement in your code). But some subroutines require supporting routines that you will find at the end of this library. You will have to include those as well."
data ""
data "You should **not** use this library and one of the others in this set that provides dialogs concurrently, because they replicate subroutine names. Pick the right one for your program and stick with it!"
data ""
data "I have not enabled the file selection dialogs - they are just too clunky and confusing. If you really need them, try the *SelectFile$()*, *SelectDir$()* and *SelectMultiFile$()* routines in the *linuxmisclib* library."
data ""
data "## Routines available:"
data ""
data "+ **Common**"
data "    + *ClearDlg*()"
data "    + *EncloseText$*()"
data "    + *getcmd$*()"
data "    + *InputDlg$*()"
data "    + *MenuDlg*()"
data "    + *MessageDlg*()"
data "    + *PasswordDlg$*()"
data "    + *RadioDlg*()"
data "    + *TestForDialogUtility$*()"
data "    + *TextFileDlg*()"
data "    + *YesNoDlg*()"
data "+ **Specific**"
data "    + *DCalendarDlg$*()"
data "    + *TransientInfoDlg*()"
data ""
data "### Common Routines"
data ""
data "**These routines are available on any of the four dialog-providing libraries.**"
data ""
data "+ **ClearDlg**() - on dialog and whiptail, this clears the dialog from your terminal. Same as the yabasic command CLEAR SCREEN, but may work better if you are expecting to issue another Linux command immediately. On zenity, clasquinator and kdialog, dummy routines are provided for compatibility so that you do not need to rewrite your code."
data ""
data "+ **EncloseText$**(thestring$) - A simplified version of the *EncloseString$*() routine that can be found in the linuxmisclib library"
data "    + Encloses a string in double quotes, if it isn't already."
data "    + Therefore *a$ = EncloseText$(\"This is text\")* gives the same result as *a$ = \"\\\"This is text\\\"\"*"
data "    + Mostly for use with filenames that may include spaces."
data ""
data "+ **getcmd$**() - returns the command set available."
data "    + This is really just for me, to stop me from getting confused while I am editing four libraries simultaneously. "
data "    + However, you could use it to test which utility (or library, in the case of clasquinator) is currently in use and if it is safe to use routines not in the common list."
data "    + e.g, *if getcmd$() = \"clasquinator\" SubmenuDlg(options ....)*"
data "    + or  *if getcmd$() = \"zenity\" ZNotifyDlg(\"this is a notification\")*"
data "+ **InputDlg$**(text$, title$, ok$, cancel$) - Presents a one-line dialog into which the user can type a string answer."
data "    + The value *title$* is the title on top of the widget"
data "    + The value *ok$* is the text of the accept button, normally OK."
data "    + The value *cancel$* is the text of the reject button, normally Cancel."
data "    + The result is returned as a string value."
data "    + *Example:*"
data "```"
data "a$ = InputDlg$(EncloseText$(\"What is your name?\"), EncloseText$(\"Who are you?\"), \"Accept\", \"Cancel\")"
data "```"
data ""
data "+ **MenuDlg**(text$, title$, ok$, cancel$, menustring$) - Create a menu of options for the user to choose from"
data "    + The value *title$* is the title on top of the widget."
data "    + The value *ok$* is the text of the accept button, normally OK."
data "    + The value *cancel$* is the text of the reject button, normally Cancel."
data "    + The value *menustring$* is the list of menu options as a single string, separated by hash signs (#). Spaces are allowed."
data "    + If the number of options exceed the available space in the widget, the list will be scrollable."
data "    + The result is returned as a numeric value, starting from 1."
data "    + If you prefer to get the same number in string format, you can use **MenuDlg$**(text$, title$, ok$, cancel$, menustring$)"
data ""
data ""
data "+ **MessageDlg**(text$, ok$) - Display a simple message with an OK button."
data "    + The value *ok$* is the text of the accept button, normally OK"
data "    + Returns nothing."
data "   + *Example:*"
data "```"
data "MessageDlg(EncloseText$(\"This is a simple message dialog. Close it with ENTER or try clicking on OK.\"),\"OK\")"
data "```"
data ""
data "+ **PasswordDlg$**(text$, title$, ok$, cancel$) - Same as *InputDlg$* but with asterisks replacing the input text."
data "    + The value *title$* is the title on top of the widget"
data "    + The value *ok$* is the text of the accept button, normally OK"
data "    + The value *cancel$* is the text of the reject button, normally Cancel"
data "    + The result is returned as a string value."
data ""
data "+ **RadioDlg**(text$, title$, ok$, cancel$, menustring$, selected$) - Create a menu of options for the user to choose from"
data "    + Same as *MenuDlg*(), except that you can indicate which item in *menustring$* is currently selected or active."
data "    + The value *title$* is the title on top of the widget"
data "    + The value *ok$* is the text of the accept button, normally OK."
data "    + The value *cancel$* is the text of the reject button, normally Cancel."
data "    + The value *menustring$* is the list of menu options as a single string, separated by hash signs (#). Spaces are allowed."
data "    + The value *selected$* is the currently selected item and must correspond to one of the items in *menustring$* - case sensitive!"
data "    + Just moving the cursor is not enough here - the value in the menu must be explicitly selected with SPACE."
data "    + If the number of options exceed the available space in the widget, the list will be scrollable."
data "    + The result is returned as a numeric value, starting from 1."
data "    + If you prefer to get the same number in string format, you can use **RadioDlg$**(text$, title$, ok$, cancel$, menustring$, selected$)"
data "    + *EXAMPLE: a = RadioDlg(\"This is a menu\", \"A Menu!\",\"Accept\", \"Deny\", \"Science#Religion#Magic#All of the above\", \"Magic\"): print a*"
data ""
data ""
data "+ **TestForDialogUtility$**() - Routine to test if the called utility actually exists on the system. An empty string returned means it does, otherwise an error message is returned."
data ""
data "+ **TextFileDlg**(filename$, title$, exit$) - Displays a text file."
data "    + 	The value *title$* is the title on top of the widget"
data "    + The value *exit$* is the title of the button. Normally EXIT"
data "    + Text wrapping varies from one dialog-provider to the next. It is better if you preformat your text file."
data "    + Returns nothing"
data ""
data "+ **YesNoDlg**(text$,yes$, no$) - Displays a dialog with text (normally a question) and the options to reply yes or no."
data "    + in *dialog*, the first CAPITAL letter of the yes$ and no$ variables will become the hotkeys for those buttons, so make sure they are different. This does not matter for the other external dialog-providing utilities - it does matter in clasquinator."
data "    + Returns 1 for yes and 0 for no."
data "    + If you would rather get the same result in string format, use *YesNoDlg$*(text$,yes$, no$)"
data ""
data "### dialog-specific routines"
data ""
data "**These routines will only work with dialog.**"
data ""
data "+ **DCalendarDlg$**(text$, ok$, cancel$) - Display a calendar widget with today's date pre-selected."
data "    + Use TAB and SHFT-TAB to move between the fields."
data "    + On exit, the date is returned in the form dd/mm/yyyy, e.g. 23/08/2018"
data "    + ONLY available in *dialog* - for *kdialog* and *zenity*, see *KCalendarDlg$()* and *ZCalendarDlg$()*"
data "    + *DCalendarDlg$()* and *ZCalendarDlg$()* are fully compatible."
data "    + *Example:* "
data "```"
data "print DCalendarDlg$(\"\\\"Pick a date\\\"\", \"Pick\", \"Escape\")"
data "```"
data ""
data "+ **TransientInfoDlg**(text$)- Display a simple message  that will exit immediately after displaying the message to the user."
data "    + The screen is not cleared when dialog exits, so that the message will remain on the screen until the calling program clears it later."
data "    + This is useful when you want to inform the user that some operations are carrying on that may require some time to finish."
data "    + ONLY available in *dialog* - it should work in *whiptail* but doesn't."
data "    + If yhou need a cross-library notification system, try *NotifyDlg()* in the *linuxmisc* library."
data "	+ Returns nothing."
data "	+ *Example:* "
data "```"
data "TransientInfoDlg(\"\\\"This will stay onscreen until you press a key\\\"\")"
data "```	"
data "**********************"

label kdialogtxt
data "/tmp/yabcheatsheetkdialogtxt"
data "Kdialog"
data "======"
data " "
data "This library for yabasic allows the use of the Linux  command kdialog to display a variety of dialogs in text mode."
data " "
data "Common"
data " "
data "ClearDlg()"
data "EncloseText$(thestring$)"
data "getcmd$()"
data "InputDlg$(text$, title$, ok$, cancel$)"
data "MenuDlg(text$, title$, ok$, cancel$, menustring$)"
data "MessageDlg(text$, ok$)"
data "PasswordDlg$(text$, title$, ok$, cancel$)"
data "RadioDlg(text$, title$, ok$, cancel$, menustring$, selected$)"
data "TestForDialogUtility$()"
data "TextFileDlg(filename$, title$, exit$)"
data "YesNoDlg(text$,yes$, no$)"
data " "
data "Specific"
data " "
data "KCalendarDlg$(text$)"
data "KGetDirDlg$(startdir$)"
data "KOpenFileDlg$(startdir$, filter$)"
data "KOpenURLDlg$(startdir$, filter$)"
data "KSaveFileDlg$(startdir$, filter$)"
data "KSaveURLDlg$(startdir$, filter$)"
data "**********************"

label kdialogmd
data "/tmp/yabcheatsheetkdialogmd"
data "# kdialoglib.yab"
data ""
data "A yabasic library (c) Michel Clasquin-Johnson 2018."
data "Licensed accordingto the MIT license"
data ""
data "This library for *yabasic* allows the use of the Linux  command *kdialog* to display a variety of dialogs in text mode."
data ""
data "The library will test for the presence of the kdialog command and will exit gracefully if it is not present. Kdialog is a KDE program, so the colours and styles will follow that of your KDE defaults. It may also take a moment or two to pop up - there are a lot of libraries to load! If speed is of the essence, stick to the *dialog*, *clasquinator* or *whiptail* libraries."
data ""
data "The entire set of libraries focuses on sane defaults and getting basic functionality into yabasic. There are a lot of options that will not be implemented!"
data ""
data "The images below are for illustration only. The exact appearance of the dialogs will depend on your system settings."
data ""
data "Developed on elementary OS 0.4 \"Loki\" and Lubuntu 18.04 (i.e. Linux), but it should work on any system that will run both yabasic and the kdialog command."
data ""
data "The library should exist either in the same folder as your program or in the standard yabasic library location on your system."
data ""
data "To use the library, use the command "
data ""
data "    import kdialoglib"
data ""
data "If you would rather cut and paste these subroutines into your own program rather than importing this rather large library, or create your own, smaller library with just the routines you need, be my guest (I *would* appreciate a note of acknowledgement in your code). But some subroutines require supporting routines that you will find at the end of this library. You will have to include those as well."
data ""
data "You should **not** use this library and one of the others in this set that provides dialogs concurrently, because they replicate subroutine names. Pick the right one for your program and stick with it!"
data ""
data "## Routines available:"
data "+ **Common**"
data "    + *ClearDlg*()"
data "    + *EncloseText$*()"
data "    + *getcmd$*()"
data "    + *InputDlg$*()"
data "    + *MenuDlg*()"
data "    + *MessageDlg*()"
data "    + *PasswordDlg$*()"
data "    + *RadioDlg*()"
data "    + *TestForDialogUtility$*()"
data "    + *TextFileDlg*()"
data "    + *YesNoDlg*()"
data "+ **Specific**"
data "    + *KCalendarDlg$*()"
data "    + *KGetDirDlg$*()"
data "    + *KOpenFileDlg$*()"
data "    + *KOpenURLDlg$*()"
data "    + *KSaveFileDlg$*()"
data "    + *KSaveURLDlg$*()"
data ""
data "### Common Routines"
data ""
data "**These routines are available on any of the four dialog-providing libraries.**"
data ""
data "+ **ClearDlg**() - on dialog and whiptail, this clears the dialog from your terminal. Same as the yabasic command CLEAR SCREEN, but may work better if you are expecting to issue another Linux command immediately. On zenity, clasquinator and kdialog, dummy routines are provided for compatibility so that you do not need to rewrite your code."
data ""
data "+ **EncloseText$**(thestring$) - A simplified version of the *EncloseString$*() routine that can be found in the linuxmisclib library"
data "    + Encloses a string in double quotes, if it isn't already."
data "    + Therefore *a$ = EncloseText$(\"This is text\")* gives the same result as *a$ = \"\\\"This is text\\\"\"*"
data "    + Mostly for use with filenames that may include spaces."
data ""
data "+ **getcmd$**() - returns the command set available."
data "    + This is really just for me, to stop me from getting confused while I am editing four libraries simultaneously. "
data "    + However, you could use it to test which utility (or library, in the case of *clasquinator*) is currently in use and if it is safe to use routines not in the common list."
data "    + e.g, *if getcmd$() = \"clasquinator\" SubmenuDlg(options ....)*"
data "    + or  *if getcmd$() = \"zenity\" ZNotifyDlg(\"this is a notification\")*"
data ""
data "+ **InputDlg$**(text$, title$, ok$, cancel$) - Presents a one-line dialog into which the user can type a string answer."
data "    + The value *title$* is the title on top of the widget"
data "    + The values *ok$* and *cancel$* have no effect in kdialog and may be omitted, but are kept here for compatibility."
data "    + The result is returned as a string value."
data "    + *Example:*"
data "```"
data "a$ = InputDlg$(EncloseText$(\"What is your name?\"), EncloseText$(\"Who are you?\"), \"Accept\", \"Cancel\")"
data "```"
data ""
data "+ **MenuDlg**(text$, title$, ok$, cancel$, menustring$) - Create a menu of options for the user to choose from"
data "    + The value *title$* is the title on top of the widget"
data "    + The values *ok$* and *cancel$* have no effect in kdialog, but are kept here for compatibility and must be supplied."
data "    + The value *menustring$* is the list of menu options as a single string, separated by hash signs (#). Spaces are allowed."
data "    + If the number of options exceed the available space in the widget, the list will be scrollable."
data "    + The result is returned as a numeric value, starting from 1."
data "    + If you prefer to get the same number in string format, you can use **MenuDlg$**(text$, title$, ok$, cancel$, menustring$) "
data ""
data "+ **MessageDlg**(text$, ok$)) - Display a simple message with an OK button."
data "    + The value ok$ has no effect in kdialog, but is kept here for compatibility"
data "    + Returns nothing."
data "   + *Example:*"
data "```"
data "MessageDlg(EncloseText$(\"This is a simple message dialog. Close it with ENTER or try clicking on OK.\"),\"OK\")"
data "```"
data ""
data "+ **PasswordDlg$**(text$, title$, ok$, cancel$) - Same as *InputDlg$* but with asterisks replacing the input text."
data "    + The value *title*$ is the title on top of the widget."
data "    + The values *ok$* and *cancel$* have no effect in kdialog and may be omitted, but are kept here for compatibility."
data "    + The result is returned as a string value."
data ""
data ""
data "+ **RadioDlg**(text$, title$, ok$, cancel$, menustring$, selected$) - Create a menu of options for the user to choose from"
data "    + Same as *MenuDlg*(), except that you can indicate which item in *menustring$* is currently selected or active."
data "    + The value *title$* is the title on top of the widget"
data "    + The values *ok$* and *cancel$* have no effect in kdialog, but are kept here for compatibility and must be supplied."
data "    + The value *menustring$* is the list of menu options as a single string, separated by hash signs (#). Spaces are allowed."
data "    + The value *selected$* is the currently selected item and must correspond to one of the items in *menustring$* - case sensitive!"
data "    + If the number of options exceed the available space in the widget, the list will be scrollable."
data "    + The result is returned as a numeric value, starting from 1."
data "    + If you prefer to get the same number in string format, you can use **RadioDlg$**(text$, title$, ok$, cancel$, menustring$, selected$)"
data "    + *EXAMPLE: a = RadioDlg(\"This is a menu\", \"A Menu!\",\"Accept\", \"Deny\", \"Science#Religion#Magic#All of the above\", \"Magic\"): print a*"
data ""
data ""
data "+ **TestForDialogUtility$**\\(\\) - Routine to test if the called utility actually exists on the system. An empty string returned means it does, otherwise an error message is returned."
data ""
data "+ **TextFileDlg**(filename$, title$, exit$) - Displays a text file."
data "    + The value *title$* is the title on top of the widget."
data "    + The value *exit$* has no effect in kde and may be omitted, but is kept here for compatibility reasons."
data "    + Text wrapping varies from one dialog-provider to the next. It is better if you preformat your text file."
data "    + Returns nothing."
data ""
data "+ **YesNoDlg**(text$,yes$, no$) - Displays a dialog with text (normally a question) and the options to reply yes or no."
data "    + in *dialog*, the first letter of the yes$ and no$ variables will become the hotkeys for those buttons, so make sure they are different. This does not matter for the other dialog-providing utilities."
data "    + Returns 1 for yes and 0 for no."
data "    + If you would rather get the same result in string format, use *YesNoDlg$*(text$,yes$, no$)"
data ""
data "### kdialog-specific routines"
data ""
data "**These routines will only work with kdialog, unless specified otherwise.**"
data ""
data "+ **KCalendarDlg$**(text$) - Display a calendar widget with today's date pre-selected."
data "    + On exit, the date is returned in the form Day-of-week Month dd yyyy, e.g Sun Jul 15 2018"
data "    + ONLY available in *kdialog*. For *dialog* and *zenity*, see *DCalendarDlg$()* and *ZCalendarDlg$()*"
data "    + *EXAMPLE: print KCalendarDlg$(\"\\\"Pick a date\\\"\")*"
data ""
data "+ **KGetDirDlg$**(startdir$) - Select a directory to open."
data "    + If startdir$ = \"\" it defaults to the HOME directory."
data "    + Result is returned as a string value."
data "    + This value is probably terminated with a linefeed - use *StripLFoffSysCmd$()* in the *linuxmisc* library to get rid of it."
data "    + Also, once you have it you will want to use *EncloseText()* to surround it with double quotes, just in case it has spaces in it."
data "    + ONLY available in kdialog, but zenity has a comparable set of commands."
data "    + For an alternative approach, see *SelectDir$()* in the *linuxmisclib* library."
data ""
data "+ **KOpenFileDlg$**(startdir$, filter$) - Select a file to open."
data "    + If startdir$ = \"\" it defaults to the HOME directory"
data "    + Filter$ should be formatted like this: *.yab* or *.doc* or *.pdf* - only ONE of these!"
data "    + If filter$ = \"\" or isw omitted it defaults to all files"
data "    + This will NOT reveal dotfiles like ~/.bashrc"
data "    + Result is returned as a string value"
data "    + This value is probably terminated with a linefeed - use *StripLFoffSysCmd$()* in the *linuxmisc* library to get rid of it. Also, once you have it you will want to use *EncloseText()* to surround it with double quotes, just in case it has spaces in it."
data "    + ONLY available in *kdialog*, but *zenity* has a comparable set of commands."
data "    + For an alternative approach, see *SelectFile$()* in the *linuxmisclib* library."
data "    + *Example:*"
data "```"
data "a$ = StripLFoffSysCmd$(KOpenFileDlg$(\"\", \".txt\")"
data "```"
data ""
data "+ **KOpenURLDlg$**(startdir$, filter$) - Same as *KOpenFileDlg$()* but result starts with *file://*"
data "    + ONLY available in *kdialog*."
data ""
data "+ **KSaveFileDlg$**(startdir$, filter$) - Select or create a file to save."
data "    + If startdir$ = \"\" it defaults to the HOME directory"
data "    + Filter$ should be formatted like this: *.yab* or *.doc* or *.pdf* - only ONE of these!"
data "    + If filter$ = \"\" or isw omitted it defaults to all files"
data "    + This will NOT reveal dotfiles like ~/.bashrc"
data "    + Result is returned as a string value"
data "    + This value is probably terminated with a linefeed - use *StripLFoffSysCmd$()* in the *linuxmisc* library to get rid of it. Also, once you have it you will want to use *EncloseText()* to surround it with double quotes, just in case it has spaces in it."
data "    + ONLY available in *kdialog*, but *zenity* has a comparable set of commands."
data ""
data "+ **KSaveURLDlg$**(startdir$, filter$) - same as *KSaveFileDlg$()*, but result starts with *file://*"
data "    + ONLY available in *kdialog*."
data "**********************"

label linuxmisctxt
data "/tmp/yabcheatsheetlinuxmisctxt"
data "Linuxmisc"
data "========="
data " "
data "This library for yabasic allows the use of a variety of common Linux commands in text mode. For example, opening a text file in the nano text editor will make it unnecessary for you to write your own text editing routine."
data " "
data "ArraySort(a()), ArraySort$(a$()) - sorts a ONE-dimensional array."
data "ConvertFile$(infile$, outfile$) - Convert any text file format that pandoc can handle."
data "ConvertFile2PDF$(infile$, outfile$) - Convert any text file format that pandoc can handle to PDF."
data "ConvertFile2String$(infile$) - Convert any text file format that pandoc can handle to text."
data "ConvertImage(inputfile$, outputfile$) - "
data "CowSay(text$) - Returns a text spoken by a randomized ASCII cartoon."
data "Define$(word$) - Get a dictionary definition of a word."
data "DistroDetails$() - Return your distro's and computer's stats ."
data "DistroLogo$() - Return your distro's logo in monochrome ASCII art format."
data "EncloseString$(thestring$,type) - Enclose a string in either single or double quotes, if it isn't already."
data "FileDedupe$(infile$,outfile$) - Remove duplicate lines from a text file infile$ and write the results to outfile$."
data "FileExists(fullpathname$) - Test if a file exists."
data "FileorDir(fullpathname$) - Test if a file (in the Unix sense) is a regular file or a directory. "
data "FileorLink(fullpathname$) - Test if a file (in the Unix sense) is a regular file or a symbolic link."
data "FileSort$(infile$,outfile$) - Sort a text file infile$ and write the results to outfile$."
data "GetEnvVar$(var$)"
data "IsFileZeroByte(pathname$) - determines if a passed filename is a zero-byte file."
data "IsItATextFile(filename$) - Tests whether a given file is a text file or not. "
data "KillPlay() - Stops any multimedia files currently playing."
data "MakeAsciiArt$(img$, width) - Convert an image file to monochrome ASCII art."
data "NotifyDlg(text$, duration, block) - Pop up a one-line notification."
data "OpenAbook$() - Opens the abook text-mode contact manager."
data "OpenCalcurse$() - Opens the calcurse text-mode calendar app."
data "OpenGtypist$() - Open the gtypist tying tutor program."
data "OpenHnb$() - Open the hnb hierarchical notebook."
data "OpenInDav$(filename$) - opens a given text file in the dav text editor. "
data "OpeninDhex$(filename$) - opens a given file in the dhex hexadecimal editor"
data "OpeninElinks$(URL$}: Opens a URL in the elinks text-based browser. "
data "OpeninFbless$(file$) - Opens a .FB2 ebook in the fbless ebook reader"
data "OpeninHte$(filename$) - opens a given file in the hte hexadecimal editor"
data "OpeninHexcurse$(filename$) - opens a given file in the hexcurses hexadecimal editor"
data "OpenInJed$(filename$) - opens a given text file in the jed text editor. "
data "OpeninLinks$(URL$): Opens a URL in the links text-based browser. "
data "OpeninLynx$(URL$): Opens a URL in the lynx text-based browser. "
data "OpenInNano$(filename$) - opens a given text file in the nano text editor."
data "OpenInMdless(filename$) - opens a Markdown-fomatted file in the mdless viewe. "
data "OpenInSc$(filename$) - opens a given text file in the sc spreadsheet. "
data "OpenInTilde$(filename$) - opens a given text file in the tilde text editor. "
data "OpenInTpp$(filename$) - Opens a given file in the tpp text presentation program. "
data "OpeninTweak$(filename$) - opens a given file in the tweak hexadecimal editor"
data "OpeninW3m$(URL$): Opens a URL in the w3m text-based browser. "
data "OpeninWordgrinder$(filename$) - Opens a given file in the wordgrinder word processor. "
data "OpenNinvader$() - start the ninvaders game (Space Invaders clone)"
data "OpenPacman$() - Start the pacman4console game (pacman clone)"
data "OpenSpeedpad$() - Opens the speedpad typing speed checker."
data "OpenTig$(gitdir$) - Opens the tig CLI UI for git."
data "OpenTina$() - Opens the tina text-based personal information manager. "
data "PlayMP3$(file$) - Plays an audio (.mp3, m4a, etc) file. "
data "PlayVideo$(file$) - Plays a video file (.mp4, .mov etc.) "
data "PlayWav$(file$) - Plays a .wav sound file. "
data "PrintFiglet$(font$, text$) - Print text$ in the figlet font font$."
data "PrintToilet$(font$, text$) - Print text$ in the toilet font font$"
data "RandInt0To9() - output a random integer between 0 and 9, inclusive."
data "ReplaceinArray$(w$(),instring$,outstring$) - Globally replace all occurences of instring$ in a one-dimensional string array with outstring$."
data "ReplaceinFile(infilename$,instring$,outstring$, outfilename$) - Globally replace all occurences of instring$ in the file infilename$ with outstring$ and writes the results to outfilename$."
data "ReplaceinLine$(line$,instring$,outstring$) - Globally replace all occurences of instring$ in the string line$ with outstring$."
data "Screensaver(onoff, type) - Starts or halts the termsaver text-based screensaver application. "
data "ScreensaverCC(onoff,type) - Starts or halts the CacaLib screensaver applications."
data "ScreensaverClock() - starts the tty-clock program in screensaver mode."
data "SelectDir$(startpath$) - Use the ranger file manager to select a directory."
data "SelectFile$(startpath$) - Use the ranger file manager to select a file."
data "SelectMulltiFile$(startpath$) - Use the ranger file manager to select a a bunch of files."
data "StripDoc$(filename$) - Convert a Microsoft Word .doc (NOT .docx) file to text and return the result as a string variable."
data "StripLFoffSysCmd$(val$) - Remove linefeeds from the results of a system call. "
data "StripPDF$(filename$) - Convert a PDF or PS file to text and return the result as a string variable."
data "TakeScreenshot$(type, thumb, filename$) - Takes a screenshot."
data "TestForUtility$(filename$), TestForUtility(filename$) - tests whether a given utility exists on your $PATH and is executable. "
data "URLExist(URL$) and URLExist$(URL$) do the equivalent job of testing whether a URL exists before sending it to OpeninLinks(), for example. "
data "WhereAmI$() - returns the current directory from which the program is running. "
data "WikipediaDump$(searchterm$, language$) - Search wikipedia for a specific string, convert the article to text and return it as a string variable."
data "WikipediaURL$(searchterm$, language$) - Search wikipedia for a specific string, and return the URL as a string variable."
data "**********************"

label linuxmiscmd
data "/tmp/yabcheatsheetlinuxmiscmd"
data "# linuxmisclib.yab"
data ""
data "A yabasic library (c) Michel Clasquin-Johnson 2018."
data "Licensed according to the MIT license."
data ""
data "This library for *yabasic* allows the use of a variety of common Linux commands in text mode. For example, opening a text file in the *nano* text editor will make it unnecessary for you to write your own text editing routine."
data ""
data "This library also contains some routines ported from my libraries originally developed under yab for Haiku."
data ""
data "These routines make heavy use of *system()* and *system$()* commands, and some write temporary files, work on them, and read them back. They. will.  slow. your. programs. down. a. lot. Also, ensuring that you (or your users) have the appropriate packages installed will be up to you. The routines themselves only check for the existence of the binary and exit with an error message if it is not found. All I can tell you is that every utility used here was found in the Debian/Ubuntu repositories. *apt-cache search* is your friend."
data ""
data "All routines are case-sensitive."
data ""
data "Developed on elementary OS 0.4 \"Loki\" and Lubuntu 18.04 (i.e. Linux), but it should work on any system that will run both yabasic and the command in question."
data ""
data "The *yabasic* I use for development is version 2.78.5, compiled and installed from source obtained at www.yabasic.de."
data ""
data "The library should exist either in the same folder as your program (symlinks work, but if you have trouble with binding, just copy the library, it is not THAT big!) or in the standard yabasic library location on your system."
data ""
data "To use the library, use the command"
data ""
data "    import linuxmisclib"
data ""
data "*before* you start using any of the routines."
data ""
data "See the file *test.bas* for test routines that will show examples of how to use these routines."
data ""
data "If you would rather cut and paste these subroutines into your own program rather than importing this rather large library, or create your own, smaller library with just the routines you need, be my guest (I *would* appreciate a note of acknowledgement in your code). But some subroutines require supporting routines that you will find at the end of this library. You will have to include those as well."
data ""
data "It is safe to use this library and ONE of the others in this set that provide dialogs concurrently,"
data ""
data "----------"
data ""
data "## Routines available:"
data ""
data "**NOTE:** All routines with the form *ConvertXXX$()*, *OpenXXX$()* or *OpeninXXX$()*, and most others that use external commands, will return an empty string if successful or a warning message if the required program is missing. The warning message will only be displayed if you do something like:"
data ""
data "    print OpeninTpp$(\"file.tpp\")"
data ""
data "(assuming *tpp* is not installed). Or you can test for its presence like this:"
data ""
data "    if OpeninTpp$(\"file.tpp\") <> \"\" {do something}"
data ""
data "----------"
data ""
data "+ **Quick Index**"
data "    + *ArraySort*(a()),  *ArraySort$*(a$()) - sorts a ONE-dimensional array."
data "    + *ConvertFile$*(infile$, outfile$) - Convert any text file format that *pandoc* can handle."
data "    + *ConvertFile2PDF$*(infile$, outfile$) - Convert any text file format that *pandoc* can handle to PDF."
data "    + *ConvertFile2String$*(infile$) - Convert any text file format that *pandoc* can handle to text."
data "    + *ConvertImage*(inputfile$, outputfile$) - "
data "    + *CowSay*(text$) - Returns a text spoken by a randomized ASCII cartoon."
data "    + *Define$*(word$) - Get a dictionary definition of a word."
data "    + *DistroDetails$*() - Return your distro's and computer's stats ."
data "    + *DistroLogo$*() - Return your distro's logo in monochrome ASCII art format."
data "    + *EncloseString$*(thestring$,type) - Enclose a string in either single or double quotes, if it isn't already."
data "    + *FileDedupe$*(infile$,outfile$) - Remove duplicate lines from a text file *infile$* and write the results to *outfile$*."
data "    + *FileExists*(fullpathname$) - Test if a file exists."
data "    + *FileorDir*(fullpathname$) - Test if a file (in the Unix sense) is a regular file or a directory. "
data "    + *FileorLink*(fullpathname$) - Test if a file (in the Unix sense) is a regular file or a symbolic link."
data "    + *FileSort$*(infile$,outfile$) - Sort a text file *infile$* and write the results to *outfile$*."
data "    + *GetEnvVar$*(var$)"
data "    + *IsFileZeroByte*(pathname$) - determines if a passed filename is a zero-byte file."
data "    + *IsItATextFile*(filename$) - Tests whether a given file is a text file or not. "
data "    + *KillPlay*() - Stops any multimedia files currently playing."
data "    + *MakeAsciiArt$*(img$, width) - Convert an image file to monochrome ASCII art."
data "    + *NotifyDlg*(text$, duration, block) - Pop up a one-line notification."
data "    + *OpenAbook$*() - Opens the *abook* text-mode contact manager."
data "    + *OpenCalcurse$*() - Opens the *calcurse* text-mode calendar app."
data "    + *OpenGtypist$*() - Open the gtypist tying tutor program."
data "    + *OpenHnb$*() - Open the *hnb* hierarchical notebook."
data "    + *OpenInDav$*(filename$) - opens a given text file in the *dav* text editor. "
data "    + *OpeninDhex$*(filename$) - opens a given file in the *dhex* hexadecimal editor"
data "    + *OpeninElinks$*(URL$}: Opens a URL in the *elinks* text-based browser. "
data "    + *OpeninFbless$*(file$) - Opens a .FB2 ebook in the *fbless* ebook reader"
data "    + *OpeninHte$*(filename$) - opens a given file in the *hte* hexadecimal editor"
data "    + *OpeninHexcurse$*(filename$) - opens a given file in the *hexcurses* hexadecimal editor"
data "    + *OpenInJed$*(filename$) - opens a given text file in the *jed* text editor. "
data "    + *OpeninLinks$*(URL$): Opens a URL in the *links* text-based browser. "
data "    + *OpeninLynx$*(URL$): Opens a URL in the *lynx* text-based browser. "
data "    + *OpenInMdless*(filename$) - opens a Markdown-formatted file in the mdless viewer. "
data "    + *OpenInNano$*(filename$) - opens a given text file in the *nano* text editor."
data "    + *OpenInSc$*(filename$) - opens a given text file in the *sc* spreadsheet. "
data "    + *OpenInTilde$*(filename$) - opens a given text file in the *tilde* text editor. "
data "    + *OpenInTpp$*(filename$) - Opens a given  file in the *tpp* text presentation program. "
data "    + *OpeninTweak$*(filename$) - opens a given file in the *tweak* hexadecimal editor"
data "    + *OpeninW3m$*(URL$): Opens a URL in the *w3m* text-based browser. "
data "    + *OpeninWordgrinder$*(filename$) - Opens a given  file in the *wordgrinder* word processor. "
data "    + *OpenNinvader$*() - start the *ninvaders* game (Space Invaders clone)"
data "    + *OpenPacman$*() - Start the *pacman4console* game (pacman clone)"
data "    + *OpenSpeedpad$*() - Opens the *speedpad* typing speed checker."
data "    + *OpenTig$*(gitdir$) - Opens the *tig* CLI UI for git."
data "    + *OpenTina$*() - Opens the *tina* text-based personal information manager. "
data "    + *PlayMP3$*(file$) - Plays an audio (.mp3, m4a, etc) file. "
data "    + *PlayVideo$*(file$) - Plays a video file (.mp4, .mov etc.) "
data "    + *PlayWav$*(file$) - Plays a .wav sound file. "
data "    + *PrintFiglet$*(font$, text$) - Print *text$* in the *figlet* font *font$*."
data "    + *PrintToilet$*(font$, text$) - Print *text$* in the *toilet* font *font$*"
data "    + *RandInt0To9*() - output a random integer between 0 and 9, inclusive."
data "    + *ReplaceinArray$*(w$(),instring$,outstring$) - Globally replace all occurences of *instring$* in a one-dimensional string array with *outstring$*."
data "    + *ReplaceinFile*(infilename$,instring$,outstring$, outfilename$) - Globally replace all occurences of *instring$* in the file *infilename$* with *outstring$* and writes the results to *outfilename$*."
data "    + *ReplaceinLine$*(line$,instring$,outstring$) - Globally replace all occurences of *instring$* in the string *line$* with *outstring$*."
data "    + *Screensaver*(onoff, type) - Starts or halts  the *termsaver* text-based screensaver application. "
data "    + *ScreensaverCC*(onoff,type) - Starts or halts  the *CacaLib* screensaver applications."
data "    + *ScreensaverClock*() - starts the *tty-clock* program in screensaver mode."
data "    + *SelectDir$*(startpath$) - Use the *ranger* file manager to select a directory."
data "    + *SelectFile$*(startpath$) - Use the *ranger* file manager to select a file."
data "    + *SelectMulltiFile$*(startpath$) - Use the *ranger* file manager to select a a bunch of files."
data "    + *StripDoc$*(filename$) - Convert a Microsoft Word .doc (NOT .docx) file to text and return the result as a string variable."
data "    + *StripLFoffSysCmd$*(val$) -  Remove linefeeds from the results of a system call. "
data "    + *StripPDF$(filename$)* - Convert a PDF or PS file to text and return the result as a string variable."
data "    + *TakeScreenshot$*(type, thumb, filename$) - Takes a screenshot."
data "    + *TestForUtility$*(filename$), *TestForUtility*(filename$) - tests whether a given utility exists on your $PATH and is executable. "
data "    + *URLExist*(URL$) and *URLExist$*(URL$) do the equivalent job of testing whether a URL exists before sending it to *OpeninLinks*(), for example. "
data "    + *WhereAmI$*() - returns the current directory from which the program is running.  "
data "    + *WikipediaDump$*(searchterm$, language$) - Search wikipedia for a specific string, convert the article to text and return it as a string variable."
data "    + *WikipediaURL$*(searchterm$, language$)  - Search wikipedia for a specific string, and return the URL as a string variable."
data ""
data "----------"
data ""
data "+ **ArraySort**(a()) - sorts a ONE-dimensional numeric array."
data "    + Do not try *a() =  ArraySort(a())*, it won't work."
data "    + Your array should be global - I have had inconsistent results with local arrays."
data "    + If you prefer, you can use the alias *SortArray()*."
data "    + **System commands used:** *sort*, *rm*."
data ""
data "+ **ArraySort$**(a$()) - sorts a ONE-dimensional string array (case-independent)."
data "    + Do not try *a$() =  ArraySort$(a$())*, it won't work."
data "    + Your array should be global - I have had inconsistent results with local arrays."
data "    + If you prefer, you can use the alias *SortArray$()*."
data "    + **System commands used:** *sort*, *rm*."
data ""
data "+ **ConvertFile$**(infile$, outfile$) - Convert any [text file format](#pandocformats) to any other format that *pandoc* ( http://pandoc.org ) can handle."
data "    + Make sure that your two filenames have the correct extension added, then *pandoc* will almost always get it right. "
data "    + **Example**: *ConvertFile$(\"myfile.md\", \"myfile.docx\")* will convert a Markdown file to Microsoft .docx format (it does not delete the original file)."
data "    + **NOTE 1**: PDF output requires *pdflatex* or *wkhtmltopdf* to be installed as well as *pandoc*. Rather use *ConvertFile2PDF()* for that. "
data "    + **NOTE 2**: Also, avoid RTF format output. Pandoc's version of this format seems nonstandard."
data "    + **System commands used:** *pandoc*."
data ""
data "+ **ConvertFile2PDF$**(infile$, outfile$) - Convert any [text file format](#pandocformats) that *pandoc* ( http://pandoc.org ) can handle to PDF."
data "    + Make sure that your infile's name has the correct extension added, and that your outfile's name ends with .pdf, then *pandoc* will almost always get it right."
data "    + **Example**: *ConvertFile2PDF$(\"myfile.md\", \"myfile.pdf\")* will convert a Markdown file to pdf format. "
data "    + **System commands used:** *pandoc*, *wkhtmltopdf*"
data ""
data "+ **ConvertFile2String$**(infile$) - Convert any [text file format](#pandocformats) that *pandoc* ( http://pandoc.org ) can handle to text."
data "    + Make sure that your filename has the correct extension, then *pandoc* will almost always get it right."
data "    + **Example**: *Let a$ = ConvertFile2String$(\"myfile.md\")* will convert a Markdown file and return the result as the string variable a$.  Unlike *ConvertFile$()*, this routine will NOT write an output file. "
data "    + **System commands used**: *pandoc*."
data ""
data "+ **ConvertImage**(inputfile$, outputfile$) - "
data "Convert an image file to a different format, optionally with a different filename."
data "    + This routine will work with either Graphics magic OR Image magic."
data "    + If both are installed, Graphics magic takes precedence."
data "    + The output format is taken from the file extension. "
data "    + The original file is left untouched."
data "    + Returns 1 for success and 0 for failure"
data "    + **System commands used**: *gm* or *convert*."
data ""
data "+ **CowSay**(text$) - Returns a text spoken by a randomized ASCII cartoon."
data "    + Both the character and the facial expression are randomized."
data "    + if *text$* is set as \"fortune\" then a random short fortune will be selected. Otherwise, the text you gave is printed."
data "    + **System commands used**: *cowsay*, *fortune*."
data "    + *Example:*"
data "````"
data "print CowSay$(\"fortune\")"
data "sleep 1"
data "print CowSay$(\"This is some other text, not a fortune\")"
data "````"
data ""
data "+ **Define$**(word$) - Get a dictionary definition of a word."
data "    + This requires the installation of the *dict* program AND at least one dict dictionary, for example *dict-gcide*."
data "    + The more dictionaries you add, the more results you can expect."
data "    + This command searches localhost only and does not go online to *dict.org*."
data "    + **System commands used**: *dict*."
data ""
data "+ **DistroDetails$**() - Return your distro's and computer's stats ."
data "    + **System commands used**: *screenfetch*."
data "    + *Example:*"
data "```"
data "print DistroDetails$()"
data "```"
data ""
data "+ **DistroLogo$**() - Return your distro's logo in monochrome ASCII art format."
data "    + **System commands used**: *screenfetch*."
data "    + *Example:*"
data "```"
data "print DistroLogo$()"
data "```"
data ""
data "+ **EncloseString$**(thestring$,type) - Enclose a string in either single or double quotes, if it isn't already."
data "    + Mostly for use with long filenames that may include spaces. No error-checking is done here."
data "    + If you feed this routine a string that already contains quotes, your program will come to a halt. Use INSTR() to check for that first. "
data ""
data "    + *type* is either"
data "        + 0 (single quote) or"
data "        + 1 (double quote)."
data "    + **System commands used:** none."
data ""
data "+ **FileDedupe$**(infile$,outfile$) - Remove duplicate lines from a text file *infile$* and write the results to *outfile$*."
data "    + Any existing *outfile$* will be overwritten!"
data "    + Will fail if *infile$* and *outfile$* are identical."
data "    + For best results your filename should be enclosed in single quotation marks so that it will not get confused by spaces. This routine will not check for that."
data "    + If you prefer, you can use the alias *DedupeFile$()*."
data "    + Returns nothing."
data "    + **System commands used:** *awk*."
data ""
data "+ **FileExists**(fullpathname$) - Test if a file exists."
data "    + Returns 1 if the file exists, or returns 0 if the file does not exist."
data "    + If only a filename is given, only the program's local directory will be searched."
data "    + But you can also give a full pathname."
data "    + **System commands used:** none."
data ""
data "+ **FileorDir**(fullpathname$) - Test if a file (in the Unix sense) is a regular file or a directory. "
data "    + **Returns** "
data "        + 1 if it is a directory, "
data "        + 0 if it is just a regular file."
data "    + **System commands used:** *test*."
data ""
data "+ **FileorLink**(fullpathname$) - Test if a file (in the Unix sense) is a regular file or a symbolic link."
data "    + **Returns** "
data "        + 1 if it is a link, "
data "        + 0 if it is just a regular file. "
data "    + This does NOT test for hard links. "
data "    + **System commands used:** *test*."
data ""
data "+ **FileSort$**(infile$,outfile$) - Sort a text file *infile$* and write the results to *outfile$*."
data "    + Any existing *outfile$* will be overwritten!"
data "    + Will fail if *infile$* and *outfile$* are identical."
data "    + For best results your filename should be enclosed in single quotation marks so that it will not get confused by spaces. This routine will not check for that."
data "    + If you prefer, you can use the alias *SortFile$()*."
data "    + Returns nothing if succesful, otherwise returns an error message."
data "    + **System commands used:** *sort*."
data ""
data "+ **GetEnvVar$**(var$)"
data "    + Get an environment variable"
data "    + Shortcut to *peek$(\"env\",  \"NAME\")*"
data "    + Do *not* precede the value *var$* with the $ character as you would do in bash."
data "    + Inspired by a library by Martin Medvold"
data "    + *Example: *a$ = GetEnvVar$(\"PATH\")*"
data ""
data "+ **IsFileZeroByte**(pathname$) - determines if a passed filename is a zero-byte file."
data "    + **Returns** "
data "        + 0 (false) if the passed variable is larger than zero bytes, "
data "        + 1 (true) if it is zero bytes in size"
data "        + note that this reverses the output of the *test -s* command."
data "    + **Caution:** will also return 1 if file does not exist: test for that with *FileExists* first."
data "    + It will also return 0 if file is actually a directory: test for that with *FileorDir* first."
data "    + If the file given is a symlink, this routine will report on the real, linked file."
data "    + This yabasic routine is incompatible with a similar routine I wrote for yab. If you program in both languages, you need to reverse the conditions."
data "    + **System commands used:** *test*."
data ""
data "+ **IsItATextFile**(filename$) - Tests whether a given file is a text file or not. "
data "    + Anything that does not have the string \"text\" in the results of the *file* command is assumed to be a binary file. This should work fine on Linux but may be problematic on BSD systems (including MacOS?) where this command may reject shell scripts. "
data "    + If you need something more powerful than *file*, I suggest you install *enca*. "
data "    + **System commands used:** *file*."
data ""
data "+ **KillPlay**() - Stops any multimedia files currently playing."
data "    + Stops playing of multimedia files if they use either *ffplay* or *aplay*, such as files launched with "
data "        + *PlayMP3()*, "
data "        + *PlayVideo()* or "
data "        + *PlayWav()*. "
data "    + Please note that this is a nuclear option: it will also affect any other programs making use of these utilities."
data "    + **System commands used:** *pkill*."
data ""
data "+ **MakeAsciiArt$**(img$, width) - Convert an image file to monochrome ASCII art."
data "    + The value *img$* can be a path to a local file or a URL."
data "    + Width default is set to 75 columns to work with most terminals, but you can override this with the optional value *width*."
data "    + *MakeAsciiArtInvert$*(img$, width) is the same as MakeAsciiArt$(), but inverts the character map. Depending on your terminal and image  this can make the image clearer (or a lot worse)."
data "    + It is a good idea to run *FileExists(img$)* first: Ruby error messages are not pretty."
data "    + Returns a string containing the asciiart image. Within this string, individual lines are demarcated by linefeeds (\"\\n\"). See the code for how to deconstruct this into an array for further manipulation. "
data "    + **System commands used:** *asciiart*."
data "    + *Examples:*"
data ""
data "````"
data "print MakeAsciiArt$(\"./imgs/MCJ.jpg\", 40)"
data "````"
data ""
data "````"
data "print reverse MakeAsciiArtInvert$(\"./imgs/MCJ.jpg\", 40)"
data "````"
data ""
data "+ **NotifyDlg**(text$, duration, block) - Pop up a one-line notification."
data "    + If *duration* is 0, the notification remains on screen until *right*-clicked, and displays an [X] button to mark the fact."
data "    + Otherwise, there is no button and the  notification disappears after the specified number of seconds."
data "    + If *block* equals 0 the notification will launch in a new process and your yabasic program can continue."
data "    + If *block* equals 1, your app will pause until the popup disappears.	"
data "    + Keep your notifications short - you don't have much space to play with."
data "    + Returns nothing"
data "    + **System utility used:** *dzen2*"
data ""
data "+ **OpenAbook$**() - Opens the *abook* text-mode contact manager."
data "    + Only the default database is provided for in this routine."
data "    + **System commands used:** *abook*."
data ""
data "+ **OpenBastet$**() - Opens the *bastet* CLI Tetris clone."
data "    + **System commands used:** *bastet*."
data ""
data "+ **OpenCalcurse$**() - Opens the *calcurse* text-mode calendar app. Only the default calendar is provided for in this routine. "
data "    + **System commands used:** *calcurse*."
data ""
data "+ **OpenGtypist$**() - Open the gtypist tying tutor program."
data "    + **System commands used:** *gtypist*"
data ""
data "+ **OpenHnb$**() - Open the *hnb* hierarchical notebook."
data "    + Only the default database is provided for in this routine."
data "    + **System commands used:** *hnb*"
data ""
data "+ **OpenInDav$**(filename$) - opens a given text file in the *dav* text editor in the same terminal window as your program. "
data "    + Will fail and return an error message if *dav* does not exist on your system. "
data "    + If *filename$* does not exist, *dav* will create one in memory and let you save it. "
data "    + If *filename$* is an empty string (\"\"), *dav* will open with a new, unnamed file. (You can also use the shortcut *OpenDav$*() for this)."
data "    + For best results your filename should be enclosed in single quotation marks so that it will not get confused by spaces. This routine will not check for that."
data "    + You may have to CLEAR SCREEN and rebuild your screen afterwards."
data "    + **System commands used:** *dav*."
data ""
data "+ **OpeninDhex$**(filename$)"
data "    + opens a given file in the *dhex* hexadecimal editor."
data "    + Must be run in a program that is already in a terminal."
data "    + For best results your filename should be enclosed in single quotation marks so that it will not get confused by spaces. This routine will not check for that."
data "    + **System commands used:** *dhex*."
data ""
data "+ **OpeninElinks$**(URL$}: Opens a URL in the *elinks* text-based browser. "
data "    + Must be run in a program that is already in a terminal. "
data "    + Will fail and return an error message if *elinks* does not exist on your system. "
data "    + For best results your URL should be enclosed in single quotation marks so that it will not get confused by spaces. This routine will not check for that. "
data "    + **System commands used:** *elinks*."
data ""
data "+ **OpeninFbless$**(file$) - Opens a .FB2 ebook in the *fbless* ebook reader"
data "    + .FB2 is an obscure format these days, but you can convert .EPUBs and so on on sites like https://www.online-convert.com ."
data "    + Must be run in a program that is already in a terminal."
data "   + For best results your URL should be enclosed in single quotation marks so that it will not get confused by spaces. This routine will not check for that."
data "   + **System commands used:** *fbless*."
data ""
data "+ **OpeninHte$**(filename$)"
data "    + opens a given file in the *hte* hexadecimal editor."
data "    + The package name for this utility might be \"ht\" on your system."
data "    + This routine forces hte into hex mode even if it is a text file, but you can explore the other modes with F6."
data "    + Must be run in a program that is already in a terminal."
data "    + For best results your filename should be enclosed in single quotation marks so that it will not get confused by spaces. This routine will not check for that."
data "    + **System commands used:** *hte*."
data ""
data "+ **OpeninHexcurse$**(filename$)"
data "    + opens a given file in the *hexcurse* hexadecimal editor."
data "    + Must be run in a program that is already in a terminal."
data "    + For best results your filename should be enclosed in single quotation marks so that it will not get confused by spaces. This routine will not check for that."
data "    + **System commands used:** *hexcurse*."
data ""
data "+ **OpenInJed$**(filename$) - opens a given text file in the *jed* text editor in the same terminal window as your program. "
data "    + Will fail and return an error message if *jed* does not exist on your system. "
data "    + If *filename$* does not exist, *jed* will create one in memory and let you save it. "
data "    + If *filename$* is an empty string (\"\"), *jed* will open with a new, unnamed file. (You can also use the shortcut *OpenJed$*() for this)."
data "    + For best results your filename should be enclosed in single quotation marks so that it will not get confused by spaces. This routine will not check for that."
data "    + You may have to CLEAR SCREEN and rebuild your screen afterwards. "
data "    + **System commands used:** *jed*."
data ""
data "+ **OpeninLinks$**(URL$): Opens a URL in the *links* text-based browser. "
data "    + Must be run in a program that is already in a terminal. "
data "    + Will fail and return an error message if *links* does not exist on your system. "
data "    + For best results your URL should be enclosed in single quotation marks so that it will not get confused by spaces. This routine will not check for that. "
data "    + **System commands used:** *links*."
data ""
data "+ **OpeninLynx$**(URL$): Opens a URL in the *lynx* text-based browser. "
data "    + Must be run in a program that is already in a terminal. "
data "    + Will fail and return an error message if *lynx* does not exist on your system. "
data "    + For best results your URL should be enclosed in single quotation marks so that it will not get confused by spaces. "
data "    + This routine will not check for that. "
data "    + **System commands used:** *lynx*."
data "+ **OpenInMdless$**(filename$) - opens a given markdown-formatted text file in the *mdless* markdown viewer in the same terminal window as your program. "
data "    + Will fail and return an error message if *mdless* does not exist on your system. "
data "    + For best results your filename should be enclosed in single quotation marks so that it will not get confused by spaces. This routine will not check for that."
data "    + You may have to CLEAR SCREEN and rebuild your screen afterwards. "
data "    + **System commands used:** *mdless*."
data ""
data "+ **OpenInNano$**(filename$) - opens a given text file in the *nano* text editor in the same terminal window as your program. "
data "    + Will fail and return an error message if *nano* does not exist on your system. "
data "    + If *filename$* does not exist, *nano* will create one in memory and let you save it. "
data "    + If filename$ is an empty string (\"\"), *nano* will open with a new, unnamed file."
data "    + You can also use the shortcut *OpenNano*$() for this\\. "
data "    + For best results your filename should be enclosed in single quotation marks so that it will not get confused by spaces. This routine will not check for that."
data "    + You may have to CLEAR SCREEN and rebuild your screen afterwards. "
data "    + **System commands used:** *nano*."
data ""
data "+ **OpenInSc$**(filename$) - opens a given text file in the *sc* spreadsheet in the same terminal window as your program. "
data "    + Will fail and return an error message if *sc* does not exist on your system. "
data "    + If *filename$* does not exist, *sc* will create one in memory and let you save it. "
data "    + If filename$ is an empty string (\"\"), *sc* will open with a new, unnamed file."
data "    + You can also use the shortcut *OpenSc*$() for this). "
data "    + For best results your filename should be enclosed in single quotation marks so that it will not get confused by spaces. This routine will not check for that."
data "    + You may have to CLEAR SCREEN and rebuild your screen afterwards. "
data "    + **System commands used:** *sc*."
data ""
data "+ **OpenInTpp$**(filename$) - Opens a given  file in the *tpp* text presentation program. "
data "    + Must be run in a program that is already in a terminal. "
data "    + For best results your filename should be enclosed in single quotation marks so that it will not get confused by spaces. This routine will not check for that. "
data "    + It is up to you to determine that filename$ is a valid *tpp* data file. "
data "    + **NOTE** that if you want to use *tpp*'s *--huge* facility, then *figlet* must also be installed. "
data "    + To see all *tpp* can do, run the bash command *tpp /usr/share/doc/tpp/examples/tpp-features.tpp*. "
data "    + **System commands used:** *tpp*, *figlet* (optional)."
data ""
data "+ **OpeninTweak$**(filename$)"
data "    + opens a given file in the *tweak* hexadecimal editor."
data "    + Must be run in a program that is already in a terminal."
data "    + For best results your filename should be enclosed in single quotation marks so that it will not get confused by spaces. This routine will not check for that."
data "    + TIP: *OpeninHte()* is much more user-friendly!"
data "    + **System commands used:** *tweak*."
data ""
data "+ **OpeninW3m$**(URL$): Opens a URL in the *w3m* text-based browser. "
data "    + Must be run in a program that is already in a terminal. "
data "    + Will fail and return an error message if *w3m* does not exist on your system. "
data "    + For best results your URL should be enclosed in single quotation marks so that it will not get confused by spaces. This routine will not check for that. "
data "    + **System commands used:** *w3m*"
data ""
data "+ **OpeninWordgrinder$**(filename$) - Opens a given  file in the *wordgrinder* word processor. "
data "    + Must be run in a program that is already in a terminal. "
data "    + If filename$ is an empty string (\"\"), *wordgrinder* will open with a new, unnamed file."
data "    + You can also use the shortcut *OpenWordgrinder$()* for this. "
data "    + For best results your filename should be enclosed in single quotation marks so that it will not get confused by spaces. This routine will not check for that.  "
data "    + It is up to you to determine that *filename$* is a valid *wordgrinder* data file. "
data "    + **System commands used:** *wordgrinder*."
data ""
data "+ **OpenNinvader$**() - start the *ninvaders* game (Space Invaders clone)"
data "    + **System commands used:** *ninvaders*."
data ""
data "+ **OpenPacman$**() - Start the *pacman4console* game (pacman clone)"
data "    + **System commands used:** *pacman4console*."
data ""
data "+ **OpenSpeedpad$**() - Opens the *speedpad* typing speed checker."
data "    + **System commands used:** *speedpad*."
data ""
data "+ **OpenTig$**(gitdir$) - Opens the *tig* CLI UI for git."
data "    + The value *gitdir$* must be a valid git directory"
data "    + **System commands used:** *tig*."
data ""
data "+ **OpenTina$**() - Opens the *tina* text-based personal information manager. "
data "    + Only the default database is provided for in this routine. "
data "    + **System commands used:** *tina*."
data ""
data "+ **PlayMP3$**(file$) - Plays an audio (.mp3, m4a, etc) file. "
data "    + Launched in a separate process, so it cannot be stopped afterwards, unless you do a *KilPlay()*. "
data "    + For best results your filename should be enclosed in single quotation marks so that it will not get confused by spaces. This routine will not check for that. "
data "    + Will also play .wav files, but *PlayWav()* is a little faster.  "
data "    + **System commands used:** *ffplay*."
data ""
data "+ **PlayVideo$**(file$) - Plays a video file (.mp4, .mov etc.) "
data "    + Launched in a separate process, so it cannot be stopped afterwards, unless you do a *KillPlay()*. "
data "    + If played in an xterm, this will open a NEW window. "
data "    + In a fullscreen console, it will play in an ASCII-art format. "
data "    + For best results your filename should be enclosed in single quotation marks so that it will not get confused by spaces. This routine will not check for that. "
data "    + This routine can also be used for audio files - It will then show the cover art, unlike the audio-only playing of *PlayMP3()*. "
data "    + **System commands used:** *ffplay*."
data ""
data "+ **PlayWav$**(file$) - Plays a .wav sound file. "
data "    + Launched in a separate process, so it cannot be stopped afterwards, unless you do a *KillPlay()*. "
data "    + For best results your filename should be enclosed in single quotation marks so that it will not get confused by spaces. This routine will not check for that. "
data "    + **System commands used:** *aplay*."
data ""
data "+ **PrintFiglet$**(font$, text$) - Print *text$* in the *figlet* font *font$*."
data "    + You can find these fonts with *locate \\*.flf*."
data "    + **System commands used:** *figlet*."
data ""
data "+ **PrintToilet$**(font$, text$) - Print *text$* in the *toilet* font *font$*"
data "    + You can find these fonts with *locate \\*.tlf*."
data "    + **System commands used:** *toilet*."
data ""
data "+ **RandInt0To9**()"
data "    + Returns a random integer between 0 and 9, inclusive."
data ""
data "+ **ReplaceinArray$**(w$(),instring$,outstring$) - Globally replace all occurences of *instring$* in a one-dimensional string array with *outstring$*."
data "    + Case-sensitive."
data "    + If you are going to use this on code of any kind, you will have to look into using escape codes."
data "    + Even in plain text, you will probably need to escape double quote marks (\") and forward slashes(\\\\)."
data "    + Unlike using *mid$()*, this one can change the length of the strings in the array: *instring$* and *outstring$* need not the the same size."
data "    + Returns a string delimited with linefeeds."
data "    + Your receiving routine can turn it back into an array with the *token* or *split* functions."
data "    + This can even be the original array."
data "    + **System commands used:** none."
data "    + **Example:**"
data "````"
data "dim a$(3)"
data "for f = 1 to 3"
data "    a$(f) = \"this is number \" + str$(f)"
data "next f"
data "b$ = ReplaceinArray$(a$(), \"number\", \"line\")"
data "num = token(b$,a$(),\"\\n\")"
data "for f = 1 to 3"
data "    print a$(f)"
data "next f"
data "````"
data ""
data "+ **ReplaceinFile**(infilename$,instring$,outstring$, outfilename$) - Globally replace all occurences of *instring$* in the file *infilename$* with *outstring$* and writes the results to the file *outfilename$*."
data "    + If *outfilename$* is not supplied, it will write the result to the original file."
data "    + Case-sensitive."
data "    +If you are going to use this on code of any kind, you will have to look into using escape codes."
data "    + Even in plain text, you will probably need to escape double quote marks (\") and forward slashes(\\\\)."
data "    + Unlike using *mid$()*, this one can change the length of the strings: *instring$* and *outstring$* need not the the same size."
data "    + Limited to the string size that yabasic can handle - try not to use it on *War and Peace*."
data ""
data "+ **ReplaceinLine$**(line$,instring$,outstring$) - Globally replace all occurences of *instring$* in the string *line$* with *outstring$*."
data "    + Case-sensitive."
data "    + If you are going to use this on code of any kind, you will have to look into using escape codes."
data "    + Even in plain text, you will probably need to escape double quote marks (\") and forward slashes(\\\\)."
data "    + Unlike using *mid$()*, this one can change the length of the string: *instring$* and *outstring$* need not the the same size."
data "    + **System commands used:** none."
data "    + **Example:** *print ReplaceinLine$(\"superman\",\"super\",\"bat\")* will print \"batman\"."
data ""
data "+ **Screensaver**(onoff, type) - Starts or halts  the *termsaver* text-based screensaver application. "
data "    + Please note that work in your program is not necessarily suspended while this runs, because it gets launched in a separate process, but it is up to you to poll for the exiting condition. "
data "    + Values for *onoff* are "
data "        + 1 (start screensaver) and "
data "        + 0 (close screensaver), "
data "    + If *onoff* is 0, the second parameter may be omitted. "
data "    + Closing the screensaver will close ALL *termsaver* instances on your system. "
data "        + You can also close it manually with CTRL-C. "
data "    + Values for *type* are "
data "        + 0 (24 hr clock), "
data "        + 1 (12 hr clock), 2 (the words \\\"Yabasic forever\\\" appear at random on your screen), "
data "        + 3 (scrolling MIMEtype information), and "
data "        + 4 (system monitor). "
data "    + This implementation only uses screensavers that do not need an Internet connection. "
data "    + See two ways to handle a screensaver in *test.bas*. "
data "    + **System commands used:** *termsaver*, *pkill*, *clear*."
data ""
data "+ **ScreensaverCC**(onoff,type) - Starts or halts  the *CacaLib* screensaver applications."
data "    + Please note that work in your program is not necessarily suspended while this runs, because it gets launched in a separate process, but it is up to you to poll for the exiting condition."
data "    + Only use this one if you KNOW your application will be running in a fullscreen console, because caca apps start a new window under X automatically."
data "    + Values for *onoff* are "
data "        + 1 (start screensaver) and "
data "        + 0 (close screensaver)"
data "    + If *onoff* is 0, the second parameter may be omitted."
data "    + Closing the screensaver will close ALL caca demo app instances on your system."
data "    + You can also close it manually with ESC."
data "    + Values for *type* are "
data "        + 0 (*cacademo*) and "
data "        + 1 (*cacafire*)"
data "    + See two ways to handle a screensaver in test.bas"
data "    + **System commands used:** *cacademo*, *cacafire*, *pkill*, *clear*."
data ""
data "+ **ScreensaverClock**() - starts the *tty-clock* program in screensaver mode."
data "    + **System commands used:** *tty-clock*."
data ""
data "+ **SelectDir$**(startpath$) - Use the *ranger* file manager to select a directory."
data "    + After you exit ranger (press q) it will return the last visited directory."
data "    + Unlike the routines in *clasquinatorlib*, these routines do not rebuild your screen when you are done."
data "    + Returns the full pathname of the selected directory."
data "    + **System commands used:** *ranger*."
data ""
data "+ **SelectFile$**(startpath$) - Use the *ranger* file manager to select a file."
data "    + Select your file with arrow keys and ENTER."
data "    + Unlike the routines in *clasquinatorlib*, these routines do not rebuild your screen when you are done."
data "    + Returns the full pathname of the selected file."
data "    + **System commands used:** *ranger*."
data ""
data "+ **SelectMulltiFile$**(startpath$) - Use the *ranger* file manager to select a a bunch of files."
data "    + Navigate to your files with arrow keys, select them with SPACE, then Press ENTER."
data "    + Unlike the routines in *clasquinatorlib*, these routines do not rebuild your screen when you are done."
data "    + Returns the full pathname of the temporary file in which your information is stored. it should be */tmp/linuxmisclib_selectfile.tmp*. You can then parse the results in any way you need."
data "    + **System commands used:** *ranger*."
data ""
data "+ **SortArray**(z()) - An alias for *Arraysort()*."
data ""
data "+ **SortArray$**(z$()) - An alias for *Arraysort$()*."
data ""
data "+ **SortFile$(infile$,outfile$)** - an alias for *FileSort$()*."
data ""
data "+ **StripDoc$**(filename$) - Convert a Microsoft Word .doc (NOT .docx) file to text and return the result as a string variable."
data "    + For best results your filename should be enclosed in single quotation marks so that it will not get confused by spaces. This routine will not check for that."
data "    + **System commands used:** *antiword*."
data ""
data "+ **StripLFoffSysCmd$**(val$) -  Remove linefeeds from the results of a system call. "
data "    + If the results of a system() or system$() command end on a LF (most do), strip the LF off and return the resulting string. "
data "    + But it can be used for any string that might have a suspected and unwanted LF at the end. "
data "    + If there is no LF present, it does nothing. "
data "    + This may not work on Windows systems, where you also need to test for a CR but we are not writing this library for Windows in any case. "
data "    + **System commands used:** none"
data ""
data "+ **StripPDF$(filename$)** - Convert a PDF or PS file to text and return the result as a string variable."
data "    + Return may contain a bunch of error messages as well as the returned text."
data "    + For best results your filename should be enclosed in single quotation marks so that it will not get confused by spaces. This routine will not check for that."
data "    + **System commands used:** *pstotext*."
data ""
data "+ **TakeScreenshot$**(type, thumb, filename$) - Takes a screenshot."
data "    + If *type* = 2 it will take all screens (in a multidisplay setup). This will not give an error if there is just one screen."
data "    + If *type* = 1 it will take the entire (single) screen."
data "    + If *type* = 0 it will capture the currently focused window, which is normally your yabasic program but I suppose you could SLEEP a few seconds to give the user the chance to click elsewhere."
data "    + If *type* = -1 it will also take the currently active window, but include any window manager decorations"
data "    + If *thumb* = 1 it will also take a thumbnail picture 20% the size of the original. If *thumb* = 0 it will not make a thumbnail."
data "    + *filename$* should have the appropriate extension, like *.png*, *.bmp* or *.jpg /.jpeg*. Not giving an extension will produce an error. Sorry, *.gif* is not supported."
data "    + If *filename$* is not given it will create a timestamped file in the current directory"
data "    + *TakeScreenshot()*, without parameters. will take the current window, without WM decorations, and create a timestamped file in the current directory, with no thumbnail."
data "    + Image quality is set at the scrot default of 75%."
data "    + Returns nothing."
data "    + **System commands used:** *scrot*."
data "    + *Example:*"
data ""
data "+ **TestForUtility$**(filename$) - tests whether a given utility exists on your $PATH and is executable. "
data "    + Returns an empty string if the utility exists, and a warning message if it does not. "
data "    + This reverses the functionality of the Linux *which* command. "
data "    + This command is used by many of the other routines in this library, and a version of it can be found in each of the various dialog libraries."
data "    + **System commands used:** *which*."
data "+ **TestForUtility**(filename$) - tests whether a given utility exists on your $PATH and is executable."
data "    + same as TestForUtility$(), but returns 1 if the utility exists, and 0 if it does not."
data "    + **System commands used:** *which*."
data ""
data "+ **URLExist**(URL$) and **URLExist$**(URL$) do the equivalent job of testing whether a URL exists before sending it to *OpeninLinks*(), for example. "
data "    + The difference is whether the *1* (it exists) or 0 (it does not exist) is sent as a numeric or string result. "
data "    + See the file *test.bas* for the different ways to use these routines.  "
data "    + **System commands used:** *curl*."
data ""
data "+ **WhereAmI$**() - returns the current directory from which the program is running.  "
data "    + **System commands used:** *pwd*."
data ""
data "+ **WikipediaDump$**(searchterm$, language$) - Search wikipedia for a specific string, convert the article to text and return it as a string variable."
data "    + If language$ is not supplied, English will be assumed."
data "    + See below for the language codes supported."
data "    + *searchterm$* may include spaces."
data "    + **NOTE**: this routine may take a second or two to get going."
data "    + **System commands used:** *wikipedia2text*."
data ""
data "+ **WikipediaURL$**(searchterm$, language$) - Search wikipedia for a specific string, and return the URL as a string variable."
data "    + if language$ is not supplied, English will be assumed."
data "    + See below for the language codes supported."
data "    + *searchterm$* may include spaces."
data "    + **NOTE**: this routine may take a second or two to get going."
data "    + **System commands used:** *wikipedia2text*."
data ""
data "## Appendix : Language support for wikipedia2text"
data ""
data "af: Afrikaans"
data "als: Alemannic"
data "ca: Catalan"
data "cs: Czech"
data "da: Danish"
data "de: German"
data "en: English"
data "eo: Esperanto"
data "es: Spanish"
data "fi: Finnish"
data "fr: French"
data "hu: Hungarian"
data "ia: Interlingua"
data "is: Islandic"
data "it: Italian"
data "la: Latin"
data "lb: Luxembourgian"
data "nds: Low German"
data "nl: Dutch"
data "nn: Norwegian (Nynorsk)"
data "no: Norwegian (Bokmal)"
data "pl: Polish"
data "pt: Portuguese"
data "rm: Rhaeto-Romanic"
data "ro: Romanian"
data "simple: Simple English"
data "sk: Slovak"
data "sl: Slovenian"
data "sv: Swedish"
data "tr: Turkish"
data "**********************"

label whiptailtxt
data "/tmp/yabcheatsheetwhiptailtxt"
data "/tmp/yabcheatsheetwhiptailtxt"
data "Whiptail"
data "========"
data " "
data "This library for yabasic allows the use of the Linux command whiptail to display a variety of dialogs in text mode."
data " "
data "Common"
data " "
data "ClearDlg()"
data "EncloseText$(thestring$)"
data "getcmd$()"
data "InputDlg$(text$, title$, ok$, cancel$)"
data "MenuDlg(text$, title$, ok$, cancel$, menustring$)"
data "MessageDlg(text$, ok$)"
data "PasswordDlg$(text$, title$, ok$, cancel$)"
data "RadioDlg(text$, title$, ok$, cancel$, menustring$, selected$)"
data "TestForDialogUtility$()"
data "TextFileDlg(filename$, title$, exit$)"
data "YesNoDlg(text$,yes$, no$)"
data "**********************"

label whiptailmd
data "/tmp/yabcheatsheetwhiptailmd"
data "# whiptaillib.yab"
data ""
data "A yabasic library (c) Michel Clasquin-Johnson 2018."
data "Licensed accordingto the MIT license"
data ""
data "This library for *yabasic* allows the use of the Linux command *whiptail* to display a variety of dialogs in text mode."
data ""
data "The library will test for the presence of the *whiptail* command and will exit gracefully if it is not present. *Whiptail* is a textmode application and must be run in a terminal. It will not be useful in a headless script."
data ""
data "The entire set of libraries focuses on sane defaults and getting basic functionality into yabasic. There are a lot of options that will not be implemented!"
data ""
data "The images below are for illustration only. The exact appearance of the dialogs will depend on your system settings."
data ""
data "Developed on elementary OS 0.4 \"Loki\" and Lubuntu 18.04 (i.e. Linux), but it should work on any system that will run both yabasic and the whiptail command."
data ""
data "The library should exist either in the same folder as your program or in the standard yabasic library location on your system."
data ""
data "To use the library, use the command "
data ""
data "    import whiptaillib"
data ""
data "If you would rather cut and paste these subroutines into your own program rather than importing this rather large library, or create your own, smaller library with just the routines you need, be my guest (I *would* appreciate a note of acknowledgement in your code). But some subroutines require supporting routines that you will find at the end of this library. You will have to include those as well."
data ""
data "You should **not** use this library and one of the others in this set that provides dialogs concurrently, because they replicate subroutine names. Pick the right one for your program and stick with it!"
data ""
data "*Whiptail* does not have file selection dialogs ATM. If you really need them, try the *SelectFile$()*, *SelectDir$()* and *SelectMultiFile$()* routines in the *linuxmisclib* library."
data ""
data "## Routines available:"
data "+ **Common**"
data "    + *ClearDlg*()"
data "    + *EncloseText$*()"
data "    + *getcmd$*()"
data "    + *InputDlg$*()"
data "    + *MenuDlg*()"
data "    + *MessageDlg*()"
data "    + *PasswordDlg$*()"
data "    + *RadioDlg*()"
data "    + *TestForDialogUtility$*()"
data "    + *TextFileDlg*()"
data "    + *YesNoDlg*()"
data "### Common Routines"
data ""
data "**These routines are available on any of the four dialog-providing libraries.**"
data ""
data "+ **ClearDlg**() - on dialog and whiptail, this clears the dialog from your terminal. Same as the yabasic command CLEAR SCREEN, but may work better if you are expecting to issue another Linux command immediately. On zenity, clasquinator and kdialog, dummy routines are provided for compatibility so that you do not need to rewrite your code."
data ""
data "+ **EncloseText$**(thestring$) - A simplified version of the *EncloseString$*() routine that can be found in the linuxmisclib library"
data "    + Encloses a string in double quotes, if it isn't already."
data "    + Therefore *a$ = EncloseText$(\"This is text\")* gives the same result as *a$ = \"\\\"This is text\\\"\"*"
data "    + Mostly for use with filenames that may include spaces."
data ""
data "+ **getcmd$**() - returns the command set available."
data "    + This is really just for me, to stop me from getting confused while I am editing four libraries simultaneously. "
data "    + However, you could use it to test which utility (or library, in the case of clasquinator) is currently in use and if it is safe to use routines not in the common list."
data "    + e.g, *if getcmd$() = \"clasquinator\" SubmenuDlg(options ....)*"
data "    + or  *if getcmd$() = \"zenity\" ZNotifyDlg(\"this is a notification\")*"
data "+ **InputDlg$**(text$, title$, ok$, cancel$) - Presents a one-line dialog into which the user can type a string answer."
data "    + The value *title$* is the title on top of the widget"
data "    + The value *ok$* is the text of the accept button, normally OK."
data "    + The value *cancel$* is the text of the reject button, normally Cancel."
data "    + The result is returned as a string value."
data "    + *Example:*"
data "```"
data "a$ = InputDlg$(EncloseText$(\"What is your name?\"), EncloseText$(\"Who are you?\"), \"Accept\", \"Cancel\")"
data "```"
data ""
data "+ **MenuDlg**(text$, title$, ok$, cancel$, menustring$) - Create a menu of options for the user to choose from"
data "    + The value *title$* has no effect in whiptail, but is kept here for compatibility and must be supplied."
data "    + The value *ok$* is the text of the accept button, normally OK."
data "    + The value *cancel$* is the text of the reject button, normally Cancel."
data "    + The value menustring$ is the list of menu options as a single string, separated by hash signs (#). Spaces are allowed."
data "    + If the number of options exceed the available space in the widget, the list will be scrollable."
data "    + The result is returned as a numeric value, starting from 1."
data "   + If you prefer to get the same number in string format, you can use **MenuDlg$**(text$, title$, ok$, cancel$, menustring$) "
data ""
data ""
data "+ **MessageDlg**(text$, ok$) - Display a simple message with an OK button."
data "    + The value *ok$* is the text of the accept button, normally OK"
data "    + Returns nothing."
data "   + *Example:*"
data "```"
data "MessageDlg(EncloseText$(\"This is a simple message dialog. Close it with O or ENTER or try clicking on OK.\"),\"OK\")"
data "```"
data ""
data "+ **PasswordDlg$**(text$, title$, ok$, cancel$) - Same as *InputDlg$* but with asterisks replacing the input text."
data "    + The value *text$* has no effect in whiptail, but is kept here for compatibility and must be supplied. This seems to be a bug in the current version of whiptail."
data "    + The value *ok$* is the text of the accept button, normally OK"
data "    + The value *cancel$* is the text of the reject button, normally Cancel"
data "    + The result is returned as a string value."
data ""
data ""
data "+ **RadioDlg**(text$, title$, ok$, cancel$, menustring$, selected$) - Create a menu of options for the user to choose from."
data "    + Same as *MenuDlg*(), except that you can indicate which item in *menustring$* is currently selected or active."
data "    + The value *title$* is the title on top of the widget"
data "    + The value *ok$* is the text of the accept button, normally OK."
data "    + The value *cancel$* is the text of the reject button, normally Cancel."
data "    + The value *menustring$* is the list of menu options as a single string, separated by hash signs (#). Spaces are allowed."
data "    + The value *selected$* is the currently selected item and must correspond to one of the items in *menustring$* - case sensitive!"
data "    + Just moving the cursor is not enough here - the value in the menu must be explicitly selected with SPACE."
data "    + If the number of options exceed the available space in the widget, the list will be scrollable."
data "    + The result is returned as a numeric value, starting from 1."
data "    + If you prefer to get the same number in string format, you can use **RadioDlg$**(text$, title$, ok$, cancel$, menustring$, selected$)"
data "    + This routine does work in whiptail, but the graphical feedback is poor. This may be a bug in the current version of whiptail."
data "    + *EXAMPLE: a = RadioDlg(\"This is a menu\", \"A Menu!\",\"Accept\", \"Deny\", \"Science#Religion#Magic#All of the above\", \"Magic\"): print a*"
data ""
data ""
data "+ **TestForDialogUtility$**\\(\\) - Routine to test if the called utility actually exists on the system. An empty string returned means it does, otherwise an error message is returned."
data ""
data "+ **TextFileDlg**(filename$, title$, exit$) - Displays a text file."
data "    + 	The value *title$* is the title on top of the widget"
data "    + The value *exit$* is the title of the button. Normally OK."
data "    + Text wrapping varies from one dialog-provider to the next. It is better if you preformat your text file."
data "    + Returns nothing."
data ""
data "+ **YesNoDlg**(text$,yes$, no$) - Displays a dialog with text (normally a question) and the options to reply yes or no."
data "    + in *dialog*, the first CAPITAL letter of the yes$ and no$ variables will become the hotkeys for those buttons, so make sure they are different. This does not matter for the other dialog-providing utilities."
data "    + Returns 1 for yes and 0 for no."
data "    + If you would rather get the same result in string format, use *YesNoDlg$*(text$,yes$, no$)"
data ""
data "### whiptail-specific routines"
data ""
data "**These routines will only work with whiptail.**"
data ""
data "None - whiptail is the least evolved of the four."
data "**********************"

label zenitytxt
data "/tmp/yabcheatsheetzenitytxt"
data "Zenity"
data "======"
data " "
data "This library for yabasic allows the use of the Linux command zenity to display a variety of dialogs in graphical mode."
data " "
data "Common"
data " "
data "ClearDlg()"
data "EncloseText$(thestring$)"
data "getcmd$()"
data "InputDlg$(text$, title$, ok$, cancel$)"
data "MenuDlg(text$, title$, ok$, cancel$, menustring$)"
data "MessageDlg(text$, ok$)"
data "PasswordDlg$(text$, title$, ok$, cancel$)"
data "RadioDlg(text$, title$, ok$, cancel$, menustring$, selected$)"
data "TestForDialogUtility$()"
data "TextFileDlg(filename$, title$, exit$)"
data "YesNoDlg(text$,yes$, no$)"
data " "
data "Specific"
data " "
data "ZCalendarDlg$(text$, ok$, cancel$)"
data "ZGetDirDlg$()"
data "ZNotifyDlg(text$)"
data "ZOpenFileDlg$()"
data "KSaveFileDlg$()"
data "**********************"

label zenitymd
data "/tmp/yabcheatsheetzenitymd"
data "# zenitylib.yab"
data ""
data "A yabasic library (c) Michel Clasquin-Johnson 2018."
data "Licensed accordingto the MIT license"
data ""
data "This library for *yabasic* allows the use of the Linux command *zenity* to display a variety of dialogs in graphical mode."
data ""
data "The library will test for the presence of the zenity command and will exit gracefully if it is not present.Zenity is a GTK program, so the colours and styles will follow that of your GNOME defaults. It may also take a moment or two to pop up - there are a lot of libraries to load! If speed is of the essence, stick to the *dialog*, *clasquinator* or *whiptail* libraries."
data ""
data "The entire set of libraries focuses on sane defaults and getting basic functionality into yabasic. There are a lot of options that will not be implemented!"
data ""
data "The images below are for illustration only. The exact appearance of the dialogs will depend on your system settings."
data ""
data "Developed on elementary OS 0.4 \"Loki\" and Lubuntu 18.04 (i.e. Linux), but it should work on any system that will run both yabasic and the zenity command."
data ""
data "The library should exist either in the same folder as your program or in the standard yabasic library location on your system."
data ""
data "To use the library, use the command"
data ""
data "    import zenitylib"
data ""
data "If you would rather cut and paste these subroutines into your own program rather than importing this rather large library, or create your own, smaller library with just the routines you need, be my guest (I *would* appreciate a note of acknowledgement in your code). But some subroutines require supporting routines that you will find at the end of this library. You will have to include those as well."
data ""
data "You should **not** use this library and one of the others that provides dialogs in this set concurrently, because they replicate subroutine names. Pick the right one for your program and stick with it!"
data ""
data "## Routines available:"
data "+ **Common**"
data "    + *ClearDlg*()"
data "    + *EncloseText$*()"
data "    + *getcmd$*()"
data "    + *InputDlg$*()"
data "    + *MenuDlg*()"
data "    + *MessageDlg*()"
data "    + *PasswordDlg$*()"
data "    + *RadioDlg*()"
data "    + *TestForDialogUtility$*()"
data "    + *TextFileDlg*()"
data "    + *YesNoDlg*()"
data "+ **Specific**"
data "    + *ZCalendarDlg$*()"
data "    + *ZGetDirDlg$*()"
data "    + *ZNotifyDlg*()"
data "    + *ZOpenFileDlg$*()"
data "    + *KSaveFileDlg$*()"
data "### Common Routines"
data ""
data "**These routines are available on any of the four dialog-providing libraries.**"
data ""
data "+ **ClearDlg**() - on dialog and whiptail, this clears the dialog from your terminal. Same as the yabasic command CLEAR SCREEN, but may work better if you are expecting to issue another Linux command immediately. On zenity and kdialog, dummy routines are provided for compatibility so that you do not need to rewrite your code."
data ""
data "+ **EncloseText$**(thestring$) - A simplified version of the *EncloseString$*() routine that can be found in the linuxmisclib library"
data "    + Encloses a string in double quotes, if it isn't already."
data "    + Therefore *a$ = EncloseText$(\"This is text\")* gives the same result as *a$ = \"\\\"This is text\\\"\"*"
data "    + Mostly for use with filenames that may include spaces."
data ""
data "+ **getcmd$**() - returns the command set available."
data "    + This is really just for me, to stop me from getting confused while I am editing four libraries simultaneously. "
data "    + However, you could use it to test which utility (or library, in the case of clasquinator) is currently in use and if it is safe to use routines not in the common list."
data "    + e.g, *if getcmd$() = \"clasquinator\" SubmenuDlg(options ....)*"
data "    + or  *if getcmd$() = \"zenity\" ZNotifyDlg(\"this is a notification\")*"
data ""
data "+ **InputDlg$**(text$, title$, ok$, cancel$) - Presents a one-line dialog into which the user can type a string answer."
data "    + The value *title$* has no effect in zenity but is kept here for compatibility and must be supplied."
data "    + The value *ok$* is the text of the accept button, normally OK."
data "    + The value *cancel$* is the text of the reject button, normally Cancel."
data "    + The result is returned as a string value."
data "    + *Example:*"
data "```"
data "a$ = InputDlg$(EncloseText$(\"What is your name?\"), EncloseText$(\"Who are you?\"), \"Accept\", \"Cancel\")"
data "```"
data ""
data "+ **MenuDlg**(text$, title$, ok$, cancel$, menustring$) - Create a menu of options for the user to choose from"
data "    + The value *title$* has no effect in zenity, but is kept here for compatibility and must be supplied."
data "    + The value *ok$* is the text of the accept button, normally OK."
data "    + The value *cancel$* is the text of the reject button, normally Cancel."
data "    + The value menustring$ is the list of menu options as a single string, separated by hash signs (#). Spaces are allowed."
data "    + If the number of options exceed the available space in the widget, the list will be scrollable."
data "    + The result is returned as a numeric value, starting from 1."
data "   + If you prefer to get the same number in string format, you can use **MenuDlg$**(text$, title$, ok$, cancel$, menustring$)"
data "   + Please note that the height of this widget is hardcoded at 400 pixels, because it looked really crap when allowed to autosize. This may change with future releases of zenity."
data "   + *EXAMPLE: a = MenuDlg(\"This is a menu\", \"A Menu!\",\"Accept\", \"Deny\", \"Science#Religion#Magic#All of the above\"): print a*"
data ""
data ""
data "+ **MessageDlg**(text$, ok$) - display a simple message with an OK button."
data "    + Returns nothing."
data "   + *Example:*"
data "```"
data "MessageDlg(EncloseText$(\"This is a simple message dialog. Close it with ENTER or try clicking on OK.\"),\"OK\")"
data "```"
data ""
data "+ **PasswordDlg$**(text$, title$, ok$, cancel$) - Same as *InputDlg$* but with asterisks replacing the input text."
data "    + The value *title$* has no effect in zenity, but is kept here for compatibility and must be supplied."
data "    + The value *ok$* is the text of the accept button, normally OK"
data "    + The value *cancel$* is the text of the reject button, normally Cancel"
data "    + The result is returned as a string value."
data ""
data "+ **RadioDlg**(text$, title$, ok$, cancel$, menustring$, selected$) - Create a menu of options for the user to choose from"
data "    + Same as *MenuDlg*(), except that radiobuttons are presented in the first column. Unlike the other dialog-creating utilities, you cannot choose which one to pre-select."
data "    + The value *title$* has no effect in zenity, but is kept here for compatibility and must be supplied."
data "    + The value *ok$* is the text of the accept button, normally OK."
data "    + The value *cancel$* is the text of the reject button, normally Cancel."
data "    + The value *menustring$* is the list of menu options as a single string, separated by hash signs (#). Spaces are allowed."
data "    + The value *selected$* has no effect in zenity, but is kept here for compatibility and must be supplied."
data "    + If the number of options exceed the available space in the widget, the list will be scrollable."
data "    + The result is returned as a numeric value, starting from 1."
data "    + If you prefer to get the same number in string format, you can use **RadioDlg$**(text$, title$, ok$, cancel$, menustring$, selected$)"
data "    + *EXAMPLE: a = RadioDlg(\"This is a menu\", \"A Menu!\",\"Accept\", \"Deny\", \"Science#Religion#Magic#All of the above\", \"Magic\"): print a*"
data ""
data ""
data "+ **TestForDialogUtility\\$**\\(\\) - Routine to test if the called utility actually exists on the system. An empty string returned means it does, otherwise an error message is returned."
data ""
data "+ **TextFileDlg**(filename$, title$, exit$) - Displays a text file."
data "    + The value *title$* has no effect on zenity, but is used here for compatibility reasons and must be supplied."
data "    + The value *exit$* is the title of the button, normally \"OK\""
data "    + Text wrapping varies from one dialog-provider to the next. It is better if you preformat your text file."
data "    + Returns nothing."
data ""
data "+ **YesNoDlg**(text$,yes$, no$) - Displays a dialog with text (normally a question) and the options to reply yes or no."
data "    + in *dialog*, the first CAPITAL letter of the yes$ and no$ variables will become the hotkeys for those buttons, so make sure they are different. This does not matter for the other dialog-providing utilities."
data "    + Returns 1 for yes and 0 for no."
data "    + If you would rather get the same result in string format, use *YesNoDlg$*(text$,yes$, no$)"
data ""
data "### Zenity-specific routines"
data ""
data "**These routines will only work with zenity, unless specified otherwise.**"
data ""
data "+ **ZCalendarDlg$**(text$, ok$, cancel$) - Display a calendar widget with today's date pre-selected."
data "    + Use TAB and SHFT-TAB to move between the fields."
data "    + The value *ok$* is the text of the accept button, normally OK."
data "    + The value *cancel$* is the text of the reject button, normally Cancel."
data "    + The value *text$* has no effect on zenity, but is used here for compatibility reasons and must be supplied."
data "    + On exit, the date is returned in the form dd/mm/yyy, e.g. 23/05/2018"
data "    + ONLY available in *zenity* - for *dialog* and *kdialog*, see *DCalendarDlg$()* and *KCalendarDlg$()*"
data "    + *DCalendarDlg$* and *ZCalendarDlg$* are fully compatible."
data "    + *EXAMPLE: print ZCalendarDlg$(\"\\\"Pick a date\\\"\", \"Pick\", \"Escape\")*"
data ""
data " + **ZGetDirDlg$**() - Select a directory to open."
data "    + Result is returned as a string value."
data "    + This value is probably terminated with a linefeed - use *StripLFoffSysCmd$()* in the *linuxmisc* library to get rid of it."
data "    + Also, once you have it you will want to use *EncloseText()* to surround it with double quotes, just in case it has "
data "spaces in it."
data "    + ONLY available in *zenity*, but *kdialog* has a comparable set of commands."
data "    + For an alternative approach, see *SelectDir$()* in the *linuxmisclib* library."
data "	"
data ""
data "+ **ZNotifyDlg**(text$) - pop up a GTK notification."
data "    + The exact placement and duration of notifications may depend on your WM settings."
data "    + ONLY available in Zenity. If you need a general utility, try *NotifyDlg()* in the *linuxmisclib* library."
data ""
data "+ **ZOpenFileDlg$**() - Select a file to open."
data " + Result is returned as a string value."
data "    + This value is probably terminated with a linefeed - use *StripLFoffSysCmd$()* in the *linuxmisc* library to get rid of it."
data "    + Also, once you have it you will want to use *EncloseText()* to surround it with double quotes, just in case it has "
data "spaces in it."
data "    + ONLY available in *zenity*, but *kdialog* has a comparable set of commands."
data "    + For an alternative approach, see *SelectFile$()* in the *linuxmisclib* library."
data "    + *Example:*"
data "```"
data "a$ = StripLFoffSysCmd$(ZSaveFileDlg$())"
data "``` "
data ""
data "+ **ZSaveFileDlg$**() - Select or create a file to save."
data " + Result is returned as a string value."
data "    + This value is probably terminated with a linefeed - use *StripLFoffSysCmd$()* in the *linuxmisc* library to get rid of it."
data "    + Also, once you have it you will want to use *EncloseText()* to surround it with double quotes, just in case it has "
data "spaces in it."
data "    + ONLY available in *zenity*, but *kdialog* has a comparable set of commands."
data "**********************"
