//COMMON ROUTINES
#COM######### A ###########
#COM######### B ###########
#COM######### C ###########

export sub ClearDlg()
	//dummy routine for compatibility, since
	//it does not really make sense in zenity
	//or kdialog
end sub

#COM######### D ###########
#COM######### E ###########

export sub EncloseText$(thestring$)
	//A simplified version of the EncloseString$() routine
	//that can be found in the linuxmisclib library
	//Encloses a string in double quotes, if it isn't already.
	//Therefore a$ = EncloseText$("This is text") gives the same result as
	// a$ = "\"This is text\""
	//mostly for use with text strings that may include spaces.
	//Not required in clasquinator, where only a dummy routine is 
	//provided for compatibility.
	local type$, type2$
	type$ = chr$(34)
	if left$(thestring$,1) <> type$ thestring$ = type$ + thestring$
	if right$(thestring$,1) <> type$ thestring$ = thestring$ + type$
	return thestring$
end sub

#COM######### F ###########
#COM######### G ###########
#COM######### H ###########
#COM######### I ###########

export sub InputDlg$(text$, title$, ok$, cancel$)
	//Presents a one-line dialog into which the 
	//user can type a string answer.
	//The value title$ has no effect in zenity
	//but is kept here for compatibility with kdialog and must be supplied.
	//The value ok$ is the text of the accept button, normally OK
	//The value cancel$ is the text of the reject button, normally Cancel
	//The result is returned as a string value.
	local return$
	return system$(getcmd$() + " --entry --text=" + text$ + " --ok-label=" + ok$ + " --cancel-label=" + cancel$)
end sub


#COM######### J ###########
#COM######### K ###########
#COM######### L ###########
#COM######### M ###########

export sub MenuDlg(text$, title$, ok$, cancel$, menustring$)
	//Create a menu of options for the user to choose from
	//The value *title$* has no effect in zenity, but is kept here for compatibility and must be supplied
	//The value *ok$* is the text of the accept button, normally OK.
	//The value *cancel$* is the text of the reject button, normally Cancel.
	//The value menustring$ is the list of menu options as a single string, separated by hash signs (#). Spaces are allowed.
	//If the number of options exceed the available space in the widget, the list will be scrollable.
	//The result is returned as a numeric value, starting from 1
	//Please note that the height of this widget is hardcoded at 400 pixels, 
	//because it looked really crap when allowed to autosize. 
	//This may change with future releases of zenity.
	local input$, output,z$(1),num
	input$ = getcmd$() + " --height=400  --hide-header  --column " + "\"#\"" + " --column " + "\"Item\"" + " --ok-label=\"" + ok$ + "\" --cancel-label=\"" + cancel$ +  "\"" + " --text=\"" + text$  + "\" --list" 
	num = token(menustring$, z$(),"#")
	for f = 1 to num
		input$ = input$ + " " + str$(f) + " \"" + z$(f) + "\"" 
	next f
	output = val(system$(input$))
	return output
end sub

export sub MenuDlg$(text$, title$, ok$, cancel$, menustring$)
	return str$(MenuDlg(text$, title$, ok$, cancel$, menustring$))
end sub

export sub MessageDlg(text$, ok$)
	//display a simple message with an OK button
	//returns nothing
	system(getcmd$() + " --ok-label=" + ok$ + " --info --text=" + text$) 
end sub

#COM######### N ###########
#COM######### O ###########
#COM######### P ###########

export sub PasswordDlg$(text$, title$, ok$, cancel$)
	//Same as InputDlg$ but with asterisks
	//replacing the input text.
	//The value title$ has no effect in zenity
	//but is kept here for compatibility with kdialog and must be supplied.
	//The value ok$ is the text of the accept button, normally OK
	//The value cancel$ is the text of the reject button, normally Cancel
	//The result is returned as a string value.
	local return$
	return system$(getcmd$() + " --entry --hide-text  --text=" + text$ + " --ok-label=" + ok$ + " --cancel-label=" + cancel$)
end sub

#COM######### Q ###########
#COM######### R ###########

export sub RadioDlg(text$, title$, ok$, cancel$, menustring$,selected$)
	//Create a menu of options for the user to choose from
	//Same as MenuDlg$(), except that  radiobuttons are
	//presented in the first column. Unlike the other
	//dialog-creating utilities, you cannot choose which one to pre-select.
	//The value *title$* has no effect in zenity, but is kept here for compatibility and must be supplied
	//The value *ok$* is the text of the accept button, normally OK.
	//The value *cancel$* is the text of the reject button, normally Cancel.
	//The value *selected$* has no effect in zenity, but is kept here for compatibility and must be supplied
	//The value menustring$ is the list of menu options as a single string, 
	//separated by hash signs (#). Spaces are allowed.
	//If the number of options exceed the available space in the widget, the list will be scrollable.
	//Please note that the height of this widget is hardcoded at 400 pixels, 
	//because it looked really crap when allowed to autosize. 
	//This may change with future releases of zenity.
	//The result is returned as a numeric value, starting from 1
	local input$, output,z$(1),num
	input$ = getcmd$() + " --height=400  --hide-header  --column " + "\"#\"" + " --column " + "\"Item\"" + " --ok-label=\"" + ok$ + "\" --cancel-label=\"" + cancel$ +  "\"" + " --text=\"" + text$  + "\" --radiolist --list" 
	num = token(menustring$, z$(),"#")
	for f = 1 to num
		input$ = input$ + " " + str$(f) + " \"" + z$(f) + "\"" 
	next f
	output = val(system$(input$))
	return output
end sub

export sub RadioDlg$(text$, title$, ok$, cancel$, menustring$,selected$)
	return str$(RadioDlg(text$, title$, ok$, cancel$, menustring$,selected$))
end sub

#COM######### S ###########
#COM######### T ###########

export sub TestForDialogUtility$()
	//internal routine to test if the called utility actually exists
	//an empty string returned means it does.
	local which$
	which$ = system$("which " + getcmd$())
	if which$ = "" then
		return "The required program " + getcmd$() + " does not exist on this system"
	else
		return ""
	endif
end sub

export sub TextFileDlg(filename$, title$, exit$)
	//Displays a text file.
	//The value title$ has no effect on zenity, but is used 
	//here for compatibility reasons and must be supplied.
	//The value exit$ is the title of the button, normally "OK"
	//Text wrapping varies from one dialog-provider to the next.
	//It is better if you preformat your text file.
	//Returns nothing
	system(getcmd$() + " --text-info --filename=" + filename$ +" --cancel-label=\"\" --ok-label=" + exit$) 
end sub


#COM######### U ###########
#COM######### V ###########
#COM######### W ###########
#COM######### X ###########
#COM######### Y ###########

export sub YesNoDlg(text$,yes$, no$)
	//Displays a dialog with text (normally a question) and the options
	//to reply yes or no.
	//Returns 1 for yes and 0 for no.
	print getcmd$() + " --question --cancel-label="+ no$ + " --ok-label=" + yes$ + " --text=" + text$
	if system(getcmd$() + " --question --cancel-label="+ no$ + " --ok-label=" + yes$ + " --text=" + text$) then
		return 0
	else
		return 1
	endif
end sub


#COM######### Z ###########



//ZENITY-SPECIFIC ROUTINES

#ZS######### Z ###########

export sub ZCalendarDlg$(text$, ok$, cancel$)
	//Display a calendar widget with today's date pre-selected.
	//Use TAB and SHFT-TAB to move between the fields.
	//The value *ok$* is the text of the accept button, normally OK.
	//The value *cancel$* is the text of the reject button, normally Cancel.
	//The value text$ has no effect on zenity, but is used 
	//here for compatibility reasons and must be supplied.
	//On exit, the date is returned in the form dd/mm/yyy, e.g. 23/05/2018
	//ONLY available in Zenity.
	//for dialog and kdialog, see DCalendarDlg$() and KCalendarDlg$()
	//DCalendarDlg$ and ZCalendarDlg$ are fully compatible.
	local inputstr$
	inputstr$ = "echo $(" + getcmd$() + " --ok-label " + ok$ + " --cancel-label " + cancel$ + " --calendar " + text$ + ")"
	return system$(inputstr$)
end sub

export sub ZNotifyDlg(text$)
	//pop up a GTK notification.
	//The exact placement and duration of notifications
	//may depend on your WM settings.
	//ONLY available in Zenity.
	system(getcmd$() + " --notification --text=\"" + text$ + "\"")
end sub


//SUPPORTIVE SUBROUTINES

export sub getcmd$()
	//This is really just for me, to stop me from
	//getting confused while I am editing four
	//libraries simultaneously.
	//However, you could use it to test which utility
	//is currently running and if it is safe to use routines
	//not in the common list.
	//e.g if getcmd$() = "zenity" ZNotifyDlg("this is a notification")
	return "zenity"
end sub